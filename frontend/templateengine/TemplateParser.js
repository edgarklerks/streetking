/**** Grammar 
start =  (stm)*
 
/// Constructs 
stm = text / stmeval  / stmwhen / func / variable

stmwhen = "[:" "when" wspaces n:"(" wspace p:(exprs) wspace z:")" wspace "]" wspace fb:funcbody {
    return {tag:"when", expr: p, ins: fb};
}
stmeval = "[:" "eval" wspaces p:(exprs) wspace "]" wspace {
   return {tag:"eval", expr: p}
}
//
// Functions
//
//

functions = "repeat" / "template"
argument = wspace key:symbol wspace ":" wspace val:value { return [key.join(""), val] }
func = "[:" kw:(functions)  args:(argument)* wspace "]" wspace fb:(funcbody)? {
argobj = {};

for(var j in args){
   var kv = args[j];
   var k = kv[0];
   var v = kv[1];
    argobj[k] = v;
 }
if(fb == "") fb = [];
    return {tag:kw, args: argobj, ins: fb}; 
} 

// Functionbody
funcbody = "{" wspace ins:start wspace "}" { return ins; }

// When statement, b0rked form of an if statement

stmwhen = "[:" "when" wspaces n:"(" wspace p:(exprs) wspace z:")" wspace "]" wspace fb:funcbody {
    return {tag:"when", expr: p, ins: fb};
}


//
//
//Expressions, right recursive, otherwise the peg parser isn't happy. 
//
//
// Binary operations and unary operations
exprs = bn:(unaryoperator wspace exprs / expr wspace (binaryoperator wspace exprs)? ) { 
var flatten = function(xs){
    var ys = []
    while(xs.length > 0){
		var x = xs.shift();
        if(typeof(x) == 'array' || x instanceof Array){
			var b = flatten(x); 
			for(var j in b){
				var n = b[j];
				ys.push(n);
			}
        } else {
			ys.push(x);
        }
    }
	return ys;
};
var sn = flatten(bn);
var tn = [];
   for(var i in sn){
        switch(sn[i]){
           case '(':
             tn.push({token: 'open'});
             continue;
           case ')':
            tn.push({token: 'close'});
            continue;
           case " ":
           case '':
            break;
           default:
            tn.push(sn[i]);
            continue;
       }
   }
return tn;

}

expr =  "(" wspace exprs wspace ")" / val:value {
     if(typeof(val) != 'undefined'){
          return {token: 'val', val: val};
    }
    return p;
}


binaryoperator = t:("+" / "-" / "/" / "*" / "==" / "!=" / ">" / "<" / ">=" / "<=" / "xor" / "|" / "rem" / "&" / "%"){
    return {token: 'binary', name: t};
}

unaryoperator = t:("!" / "abs" / "round" / "floor" / "ceil") {
    return {token: 'unary', name: t};
}

//Variable 
variable = "[:" blg:var "]" {return {tag: 'variable', data: blg}; }

// Values and variables 
value = string / object / number / bool / var 

var = p:(object / varSymbol) {
	return {tag: 'var', val: p};
}

// Various primitive types 



number = float / int
// Number values 
nat = t:([0-9]+) {
	return t.join("");
}
int = p:(("-")? nat) {
	return {tag:"integer", val: parseInt(p.join(""))};
}
float = c:(int "." (nat)?) {
		return {tag:"float", val:parseFloat(c.join(""))};
}
// Booleans 
bool = t:("true" / "false" ) {
	return {tag:"bool", val:t};
}

// objects 
object = n:symbol p:(property)+ {
    return {tag: 'objectaccessor', object: n.join(""), properties: p};
}


property =  '.' t:symbol {
		return t.join("");
}

varSymbol = p:symbol {
		return {tag:'symbol', val: p.join("")};
}

// Strings 
string = "\"" s:stringc "\"" {
	return {tag: 'string', val:s};
}
stringNonEscaped = t:([^"\\]+) {
	return t.join("");
}
stringc = p:("\\\"" / "\\\\" / stringNonEscaped)+ {
	return p.join("");
}

symbol = t:[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]+ 
text = flup:[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>/\s\n\r\t?"'\\/ ]+ 
{ return {tag: 'text', data:flup.join("")}; }

// Wspace helpers 
wspace = ([ \t\n\r])*
wspaces = ([ \t\n\r])+

*/
TemplateParser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "stm": parse_stm,
        "stmwhen": parse_stmwhen,
        "stmeval": parse_stmeval,
        "functions": parse_functions,
        "argument": parse_argument,
        "func": parse_func,
        "funcbody": parse_funcbody,
        "stmwhen": parse_stmwhen,
        "exprs": parse_exprs,
        "expr": parse_expr,
        "binaryoperator": parse_binaryoperator,
        "unaryoperator": parse_unaryoperator,
        "variable": parse_variable,
        "value": parse_value,
        "var": parse_var,
        "number": parse_number,
        "nat": parse_nat,
        "int": parse_int,
        "float": parse_float,
        "bool": parse_bool,
        "object": parse_object,
        "property": parse_property,
        "varSymbol": parse_varSymbol,
        "string": parse_string,
        "stringNonEscaped": parse_stringNonEscaped,
        "stringc": parse_stringc,
        "symbol": parse_symbol,
        "text": parse_text,
        "wspace": parse_wspace,
        "wspaces": parse_wspaces
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_stm();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_stm();
        }
        return result0;
      }
      
      function parse_stm() {
        var result0;
        
        result0 = parse_text();
        if (result0 === null) {
          result0 = parse_stmeval();
          if (result0 === null) {
            result0 = parse_stmwhen();
            if (result0 === null) {
              result0 = parse_func();
              if (result0 === null) {
                result0 = parse_variable();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_stmwhen() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "[:") {
          result0 = "[:";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[:\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 4) === "when") {
            result1 = "when";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"when\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_wspaces();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result3 = "(";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_wspace();
                if (result4 !== null) {
                  result5 = parse_exprs();
                  if (result5 !== null) {
                    result6 = parse_wspace();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        result7 = ")";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_wspace();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos) === 93) {
                            result9 = "]";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_wspace();
                            if (result10 !== null) {
                              result11 = parse_funcbody();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, p, z, fb) {
            return {tag:"when", expr: p, ins: fb};
        })(pos0, result0[3], result0[5], result0[7], result0[11]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_stmeval() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "[:") {
          result0 = "[:";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[:\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 4) === "eval") {
            result1 = "eval";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"eval\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_wspaces();
            if (result2 !== null) {
              result3 = parse_exprs();
              if (result3 !== null) {
                result4 = parse_wspace();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    result5 = "]";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_wspace();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
           return {tag:"eval", expr: p}
        })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_functions() {
        var result0;
        
        if (input.substr(pos, 6) === "repeat") {
          result0 = "repeat";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"repeat\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 8) === "template") {
            result0 = "template";
            pos += 8;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"template\"");
            }
          }
        }
        return result0;
      }
      
      function parse_argument() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_wspace();
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result2 = parse_wspace();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result3 = ":";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_wspace();
                if (result4 !== null) {
                  result5 = parse_value();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, key, val) { return [key.join(""), val] })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_func() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "[:") {
          result0 = "[:";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[:\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_functions();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_argument();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_argument();
            }
            if (result2 !== null) {
              result3 = parse_wspace();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  result4 = "]";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_wspace();
                  if (result5 !== null) {
                    result6 = parse_funcbody();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, kw, args, fb) {
        argobj = {};
        
        for(var j in args){
           var kv = args[j];
           var k = kv[0];
           var v = kv[1];
            argobj[k] = v;
         }
        if(fb == "") fb = [];
            return {tag:kw, args: argobj, ins: fb}; 
        })(pos0, result0[1], result0[2], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_funcbody() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_wspace();
          if (result1 !== null) {
            result2 = parse_start();
            if (result2 !== null) {
              result3 = parse_wspace();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 125) {
                  result4 = "}";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ins) { return ins; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_stmwhen() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "[:") {
          result0 = "[:";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[:\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 4) === "when") {
            result1 = "when";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"when\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_wspaces();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result3 = "(";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_wspace();
                if (result4 !== null) {
                  result5 = parse_exprs();
                  if (result5 !== null) {
                    result6 = parse_wspace();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        result7 = ")";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_wspace();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos) === 93) {
                            result9 = "]";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_wspace();
                            if (result10 !== null) {
                              result11 = parse_funcbody();
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, p, z, fb) {
            return {tag:"when", expr: p, ins: fb};
        })(pos0, result0[3], result0[5], result0[7], result0[11]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exprs() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_unaryoperator();
        if (result0 !== null) {
          result1 = parse_wspace();
          if (result1 !== null) {
            result2 = parse_exprs();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_expr();
          if (result0 !== null) {
            result1 = parse_wspace();
            if (result1 !== null) {
              pos2 = pos;
              result2 = parse_binaryoperator();
              if (result2 !== null) {
                result3 = parse_wspace();
                if (result3 !== null) {
                  result4 = parse_exprs();
                  if (result4 !== null) {
                    result2 = [result2, result3, result4];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, bn) { 
        var flatten = function(xs){
            var ys = []
            while(xs.length > 0){
        		var x = xs.shift();
                if(typeof(x) == 'array' || x instanceof Array){
        			var b = flatten(x); 
        			for(var j in b){
        				var n = b[j];
        				ys.push(n);
        			}
                } else {
        			ys.push(x);
                }
            }
        	return ys;
        };
        var sn = flatten(bn);
        var tn = [];
           for(var i in sn){
                switch(sn[i]){
                   case '(':
                     tn.push({token: 'open'});
                     continue;
                   case ')':
                    tn.push({token: 'close'});
                    continue;
                   case " ":
                   case '':
                    break;
                   default:
                    tn.push(sn[i]);
                    continue;
               }
           }
        return tn;
        
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expr() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_wspace();
          if (result1 !== null) {
            result2 = parse_exprs();
            if (result2 !== null) {
              result3 = parse_wspace();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result4 = ")";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_value();
          if (result0 !== null) {
            result0 = (function(offset, val) {
               if(typeof(val) != 'undefined'){
                    return {token: 'val', val: val};
              }
              return p;
          })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_binaryoperator() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 43) {
          result0 = "+";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 47) {
              result0 = "/";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 42) {
                result0 = "*";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 2) === "==") {
                  result0 = "==";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"==\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 2) === "!=") {
                    result0 = "!=";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!=\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 62) {
                      result0 = ">";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 60) {
                        result0 = "<";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"<\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 2) === ">=") {
                          result0 = ">=";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\">=\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 2) === "<=") {
                            result0 = "<=";
                            pos += 2;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"<=\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 3) === "xor") {
                              result0 = "xor";
                              pos += 3;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"xor\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 124) {
                                result0 = "|";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"|\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 3) === "rem") {
                                  result0 = "rem";
                                  pos += 3;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"rem\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 38) {
                                    result0 = "&";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"&\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 37) {
                                      result0 = "%";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"%\"");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
            return {token: 'binary', name: t};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_unaryoperator() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 33) {
          result0 = "!";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3) === "abs") {
            result0 = "abs";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"abs\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 5) === "round") {
              result0 = "round";
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"round\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 5) === "floor") {
                result0 = "floor";
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"floor\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 4) === "ceil") {
                  result0 = "ceil";
                  pos += 4;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ceil\"");
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
            return {token: 'unary', name: t};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_variable() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "[:") {
          result0 = "[:";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[:\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_var();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 93) {
              result2 = "]";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, blg) {return {tag: 'variable', data: blg}; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_value() {
        var result0;
        
        result0 = parse_string();
        if (result0 === null) {
          result0 = parse_object();
          if (result0 === null) {
            result0 = parse_number();
            if (result0 === null) {
              result0 = parse_bool();
              if (result0 === null) {
                result0 = parse_var();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_var() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_object();
        if (result0 === null) {
          result0 = parse_varSymbol();
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
        	return {tag: 'var', val: p};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_number() {
        var result0;
        
        result0 = parse_float();
        if (result0 === null) {
          result0 = parse_int();
        }
        return result0;
      }
      
      function parse_nat() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
        	return t.join("");
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_int() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_nat();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
        	return {tag:"integer", val: parseInt(p.join(""))};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_float() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_int();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_nat();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {
        		return {tag:"float", val:parseFloat(c.join(""))};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bool() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 4) === "true") {
          result0 = "true";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 5) === "false") {
            result0 = "false";
            pos += 5;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
        	return {tag:"bool", val:t};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_object() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_symbol();
        if (result0 !== null) {
          result2 = parse_property();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_property();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, p) {
            return {tag: 'objectaccessor', object: n.join(""), properties: p};
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_property() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
        		return t.join("");
        })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_varSymbol() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_symbol();
        if (result0 !== null) {
          result0 = (function(offset, p) {
        		return {tag:'symbol', val: p.join("")};
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_stringc();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {
        	return {tag: 'string', val:s};
        })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_stringNonEscaped() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^"\\]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^\"\\\\]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^"\\]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"\\\\]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
        	return t.join("");
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_stringc() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\\\"") {
          result1 = "\\\"";
          pos += 2;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result1 === null) {
          if (input.substr(pos, 2) === "\\\\") {
            result1 = "\\\\";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result1 === null) {
            result1 = parse_stringNonEscaped();
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos, 2) === "\\\"") {
              result1 = "\\\"";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos, 2) === "\\\\") {
                result1 = "\\\\";
                pos += 2;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\\\\\"");
                }
              }
              if (result1 === null) {
                result1 = parse_stringNonEscaped();
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
        	return p.join("");
        })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1;
        
        if (/^[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_text() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\/s\n\r\t?"'\\\/ ]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\\/s\\n\\r\\t?\"'\\\\\\/ ]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\/s\n\r\t?"'\\\/ ]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\\/s\\n\\r\\t?\"'\\\\\\/ ]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, flup) { return {tag: 'text', data:flup.join("")}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_wspace() {
        var result0, result1;
        
        result0 = [];
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ \t\n\r]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ \\t\\n\\r]");
            }
          }
        }
        return result0;
      }
      
      function parse_wspaces() {
        var result0, result1;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\n\r]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\n\\r]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();