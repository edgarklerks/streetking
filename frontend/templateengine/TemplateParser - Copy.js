
/****h* js/stream/TemplateParser.js
 * NAME
 * Parser peg
 * SOURCE   
start =  (stm)*
 
/// Constructs 
stm = text / stmeval  / stmwhen / func / variable

stmwhen = "[:" "when" wspaces n:"(" wspace p:(exprs) wspace z:")" wspace "]" wspace fb:funcbody {
    return {tag:"when", expr: p, ins: fb};
}
stmeval = "[:" "eval" wspaces p:(exprs) wspace "]" wspace {
   return {tag:"eval", expr: p}
}
//
// Functions
//
//

functions = "repeat" / "template"
argument = wspace key:symbol wspace ":" wspace val:value { return [key.join(""), val] }
func = "[:" kw:(functions)  args:(argument)* wspace "]" wspace fb:(funcbody)? {
argobj = {};

for(var j in args){
   var kv = args[j];
   var k = kv[0];
   var v = kv[1];
    argobj[k] = v;
 }
if(fb == "") fb = [];
    return {tag:kw, args: argobj, ins: fb}; 
} 

// Functionbody
funcbody = "{" wspace ins:start wspace "}" { return ins; }

// When statement, b0rked form of an if statement

stmwhen = "[:" "when" wspaces n:"(" wspace p:(exprs) wspace z:")" wspace "]" wspace fb:funcbody {
    return {tag:"when", expr: p, ins: fb};
}


//
//
//Expressions, right recursive, otherwise the peg parser isn't happy. 
//
//
// Binary operations and unary operations
exprs = bn:(unaryoperator wspace exprs / expr wspace (binaryoperator wspace exprs)? ) { 
var flatten = function(xs){
    var ys = []
    while(xs.length > 0){
		var x = xs.shift();
        if(typeof(x) == 'array' || x instanceof Array){
			var b = flatten(x); 
			for(var j in b){
				var n = b[j];
				ys.push(n);
			}
        } else {
			ys.push(x);
        }
    }
	return ys;
};
var sn = flatten(bn);
var tn = [];
   for(var i in sn){
        switch(sn[i]){
           case '(':
             tn.push({token: 'open'});
             continue;
           case ')':
            tn.push({token: 'close'});
            continue;
           case " ":
           case '':
            break;
           default:
            tn.push(sn[i]);
            continue;
       }
   }
return tn;

}

expr =  "(" wspace exprs wspace ")" / val:value {
     if(typeof(val) != 'undefined'){
          return {token: 'val', val: val};
    }
    return p;
}


binaryoperator = t:("+" / "-" / "/" / "*" / "==" / "!=" / ">" / "<" / ">=" / "<=" / "xor" / "|" / "rem" / "&" / "%"){
    return {token: 'binary', name: t};
}

unaryoperator = t:("!" / "abs" / "round" / "floor" / "ceil") {
    return {token: 'unary', name: t};
}

//Variable 
variable = "[:" blg:var "]" {return {tag: 'variable', data: blg}; }

// Values and variables 
value = string / object / number / bool / var 

var = p:(object / varSymbol) {
	return {tag: 'var', val: p};
}

// Various primitive types 



number = float / int
// Number values 
nat = t:([0-9]+) {
	return t.join("");
}
int = p:(("-")? nat) {
	return {tag:"integer", val: parseInt(p.join(""))};
}
float = c:(int "." (nat)?) {
		return {tag:"float", val:parseFloat(c.join(""))};
}
// Booleans 
bool = t:("true" / "false" ) {
	return {tag:"bool", val:t};
}

// objects 
object = n:symbol p:(property)+ {
    return {tag: 'objectaccessor', object: n.join(""), properties: p};
}


property =  '.' t:symbol {
		return t.join("");
}

varSymbol = p:symbol {
		return {tag:'symbol', val: p.join("")};
}

// Strings 
string = "\"" s:stringc "\"" {
	return {tag: 'string', val:s};
}
stringNonEscaped = t:([^"\\]+) {
	return t.join("");
}
stringc = p:("\\\"" / "\\\\" / stringNonEscaped)+ {
	return p.join("");
}

symbol = t:[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789]+ 
text = flup:[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>/\s\n\r\t?"'\\/ ]+ 
{ return {tag: 'text', data:flup.join("")}; }

// Wspace helpers 
wspace = ([ \t\n\r])*
wspaces = ([ \t\n\r])+
******/

TemplateParser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "argument": parse_argument,
        "binaryoperator": parse_binaryoperator,
        "bool": parse_bool,
        "expr": parse_expr,
        "exprs": parse_exprs,
        "float": parse_float,
        "func": parse_func,
        "funcbody": parse_funcbody,
        "functions": parse_functions,
        "int": parse_int,
        "nat": parse_nat,
        "number": parse_number,
        "object": parse_object,
        "property": parse_property,
        "start": parse_start,
        "stm": parse_stm,
        "stmeval": parse_stmeval,
        "stmwhen": parse_stmwhen,
        "string": parse_string,
        "stringNonEscaped": parse_stringNonEscaped,
        "stringc": parse_stringc,
        "symbol": parse_symbol,
        "text": parse_text,
        "unaryoperator": parse_unaryoperator,
        "value": parse_value,
        "var": parse_var,
        "varSymbol": parse_varSymbol,
        "variable": parse_variable,
        "wspace": parse_wspace,
        "wspaces": parse_wspaces
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_stm();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_stm();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stm() {
        var cacheKey = 'stm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_text();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_stmeval();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_stmwhen();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_func();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_variable();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stmwhen() {
        var cacheKey = 'stmwhen@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "[:") {
          var result2 = "[:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[:\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 4) === "when") {
            var result3 = "when";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"when\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_wspaces();
            if (result4 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result5 = "(";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result5 !== null) {
                var result6 = parse_wspace();
                if (result6 !== null) {
                  var result7 = parse_exprs();
                  if (result7 !== null) {
                    var result8 = parse_wspace();
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result9 = ")";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result9 !== null) {
                        var result10 = parse_wspace();
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "]") {
                            var result11 = "]";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result11 !== null) {
                            var result12 = parse_wspace();
                            if (result12 !== null) {
                              var result13 = parse_funcbody();
                              if (result13 !== null) {
                                var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(n, p, z, fb) {
              return {tag:"when", expr: p, ins: fb};
          })(result1[3], result1[5], result1[7], result1[11])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stmeval() {
        var cacheKey = 'stmeval@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "[:") {
          var result2 = "[:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[:\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 4) === "eval") {
            var result3 = "eval";
            pos += 4;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"eval\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_wspaces();
            if (result4 !== null) {
              var result5 = parse_exprs();
              if (result5 !== null) {
                var result6 = parse_wspace();
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse_wspace();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) {
             return {tag:"eval", expr: p}
          })(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_functions() {
        var cacheKey = 'functions@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "repeat") {
          var result2 = "repeat";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"repeat\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 8) === "template") {
            var result1 = "template";
            pos += 8;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"template\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument() {
        var cacheKey = 'argument@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_wspace();
        if (result2 !== null) {
          var result3 = parse_symbol();
          if (result3 !== null) {
            var result4 = parse_wspace();
            if (result4 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result5 = ":";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result5 !== null) {
                var result6 = parse_wspace();
                if (result6 !== null) {
                  var result7 = parse_value();
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(key, val) { return [key.join(""), val] })(result1[1], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_func() {
        var cacheKey = 'func@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "[:") {
          var result2 = "[:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[:\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_functions();
          if (result3 !== null) {
            var result4 = [];
            var result10 = parse_argument();
            while (result10 !== null) {
              result4.push(result10);
              var result10 = parse_argument();
            }
            if (result4 !== null) {
              var result5 = parse_wspace();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result6 = "]";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = parse_wspace();
                  if (result7 !== null) {
                    var result9 = parse_funcbody();
                    var result8 = result9 !== null ? result9 : '';
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(kw, args, fb) {
          argobj = {};
          
          for(var j in args){
             var kv = args[j];
             var k = kv[0];
             var v = kv[1];
              argobj[k] = v;
           }
          if(fb == "") fb = [];
              return {tag:kw, args: argobj, ins: fb}; 
          })(result1[1], result1[2], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_funcbody() {
        var cacheKey = 'funcbody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_wspace();
          if (result3 !== null) {
            var result4 = parse_start();
            if (result4 !== null) {
              var result5 = parse_wspace();
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ins) { return ins; })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_exprs() {
        var cacheKey = 'exprs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result11 = parse_unaryoperator();
        if (result11 !== null) {
          var result12 = parse_wspace();
          if (result12 !== null) {
            var result13 = parse_exprs();
            if (result13 !== null) {
              var result10 = [result11, result12, result13];
            } else {
              var result10 = null;
              pos = savedPos2;
            }
          } else {
            var result10 = null;
            pos = savedPos2;
          }
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result1 = result10;
        } else {
          var savedPos0 = pos;
          var result3 = parse_expr();
          if (result3 !== null) {
            var result4 = parse_wspace();
            if (result4 !== null) {
              var savedPos1 = pos;
              var result7 = parse_binaryoperator();
              if (result7 !== null) {
                var result8 = parse_wspace();
                if (result8 !== null) {
                  var result9 = parse_exprs();
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(bn) { 
          var flatten = function(xs){
              var ys = []
              while(xs.length > 0){
          		var x = xs.shift();
                  if(typeof(x) == 'array' || x instanceof Array){
          			var b = flatten(x); 
          			for(var j in b){
          				var n = b[j];
          				ys.push(n);
          			}
                  } else {
          			ys.push(x);
                  }
              }
          	return ys;
          };
          var sn = flatten(bn);
          var tn = [];
             for(var i in sn){
                  switch(sn[i]){
                     case '(':
                       tn.push({token: 'open'});
                       continue;
                     case ')':
                      tn.push({token: 'close'});
                      continue;
                     case " ":
                     case '':
                      break;
                     default:
                      tn.push(sn[i]);
                      continue;
                 }
             }
          return tn;
          
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expr() {
        var cacheKey = 'expr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result4 = "(";
          pos += 1;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result4 !== null) {
          var result5 = parse_wspace();
          if (result5 !== null) {
            var result6 = parse_exprs();
            if (result6 !== null) {
              var result7 = parse_wspace();
              if (result7 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result8 = ")";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_value();
          var result1 = result2 !== null
            ? (function(val) {
                 if(typeof(val) != 'undefined'){
                      return {token: 'val', val: val};
                }
                return p;
            })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_binaryoperator() {
        var cacheKey = 'binaryoperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "+") {
          var result16 = "+";
          pos += 1;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result16 !== null) {
          var result1 = result16;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result15 = "-";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result15 !== null) {
            var result1 = result15;
          } else {
            if (input.substr(pos, 1) === "/") {
              var result14 = "/";
              pos += 1;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result14 !== null) {
              var result1 = result14;
            } else {
              if (input.substr(pos, 1) === "*") {
                var result13 = "*";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result13 !== null) {
                var result1 = result13;
              } else {
                if (input.substr(pos, 2) === "==") {
                  var result12 = "==";
                  pos += 2;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"==\"");
                  }
                }
                if (result12 !== null) {
                  var result1 = result12;
                } else {
                  if (input.substr(pos, 2) === "!=") {
                    var result11 = "!=";
                    pos += 2;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"!=\"");
                    }
                  }
                  if (result11 !== null) {
                    var result1 = result11;
                  } else {
                    if (input.substr(pos, 1) === ">") {
                      var result10 = ">";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result10 !== null) {
                      var result1 = result10;
                    } else {
                      if (input.substr(pos, 1) === "<") {
                        var result9 = "<";
                        pos += 1;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"<\"");
                        }
                      }
                      if (result9 !== null) {
                        var result1 = result9;
                      } else {
                        if (input.substr(pos, 2) === ">=") {
                          var result8 = ">=";
                          pos += 2;
                        } else {
                          var result8 = null;
                          if (reportMatchFailures) {
                            matchFailed("\">=\"");
                          }
                        }
                        if (result8 !== null) {
                          var result1 = result8;
                        } else {
                          if (input.substr(pos, 2) === "<=") {
                            var result7 = "<=";
                            pos += 2;
                          } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"<=\"");
                            }
                          }
                          if (result7 !== null) {
                            var result1 = result7;
                          } else {
                            if (input.substr(pos, 3) === "xor") {
                              var result6 = "xor";
                              pos += 3;
                            } else {
                              var result6 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"xor\"");
                              }
                            }
                            if (result6 !== null) {
                              var result1 = result6;
                            } else {
                              if (input.substr(pos, 1) === "|") {
                                var result5 = "|";
                                pos += 1;
                              } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"|\"");
                                }
                              }
                              if (result5 !== null) {
                                var result1 = result5;
                              } else {
                                if (input.substr(pos, 3) === "rem") {
                                  var result4 = "rem";
                                  pos += 3;
                                } else {
                                  var result4 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"rem\"");
                                  }
                                }
                                if (result4 !== null) {
                                  var result1 = result4;
                                } else {
                                  if (input.substr(pos, 1) === "&") {
                                    var result3 = "&";
                                    pos += 1;
                                  } else {
                                    var result3 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"&\"");
                                    }
                                  }
                                  if (result3 !== null) {
                                    var result1 = result3;
                                  } else {
                                    if (input.substr(pos, 1) === "%") {
                                      var result2 = "%";
                                      pos += 1;
                                    } else {
                                      var result2 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"%\"");
                                      }
                                    }
                                    if (result2 !== null) {
                                      var result1 = result2;
                                    } else {
                                      var result1 = null;;
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(t) {
              return {token: 'binary', name: t};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unaryoperator() {
        var cacheKey = 'unaryoperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "!") {
          var result7 = "!";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"!\"");
          }
        }
        if (result7 !== null) {
          var result1 = result7;
        } else {
          if (input.substr(pos, 3) === "abs") {
            var result6 = "abs";
            pos += 3;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"abs\"");
            }
          }
          if (result6 !== null) {
            var result1 = result6;
          } else {
            if (input.substr(pos, 5) === "round") {
              var result5 = "round";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"round\"");
              }
            }
            if (result5 !== null) {
              var result1 = result5;
            } else {
              if (input.substr(pos, 5) === "floor") {
                var result4 = "floor";
                pos += 5;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"floor\"");
                }
              }
              if (result4 !== null) {
                var result1 = result4;
              } else {
                if (input.substr(pos, 4) === "ceil") {
                  var result3 = "ceil";
                  pos += 4;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"ceil\"");
                  }
                }
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  if (input.substr(pos, 5) === "nl2br") {
                    var result2 = "nl2br";
                    pos += 5;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"nl2br\"");
                    }
                  }
                  if (result2 !== null) {
                    var result1 = result2;
                  } else {
                    var result1 = null;;
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(t) {
              return {token: 'unary', name: t};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable() {
        var cacheKey = 'variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "[:") {
          var result2 = "[:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"[:\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_var();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result4 = "]";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(blg) {return {tag: 'variable', data: blg}; })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_value() {
        var cacheKey = 'value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_string();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_object();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_number();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_bool();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_var();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_var() {
        var cacheKey = 'var@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_object();
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_varSymbol();
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(p) {
          	return {tag: 'var', val: p};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_float();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_int();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nat() {
        var cacheKey = 'nat@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(t) {
          	return t.join("");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_int() {
        var cacheKey = 'int@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result4 = "-";
          pos += 1;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_nat();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) {
          	return {tag:"integer", val: parseInt(p.join(""))};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float() {
        var cacheKey = 'float@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_int();
        if (result2 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            var result5 = parse_nat();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {
          		return {tag:"float", val:parseFloat(c.join(""))};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bool() {
        var cacheKey = 'bool@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "true") {
          var result3 = "true";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        if (result3 !== null) {
          var result1 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(t) {
          	return {tag:"bool", val:t};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object() {
        var cacheKey = 'object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_symbol();
        if (result2 !== null) {
          var result4 = parse_property();
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              var result4 = parse_property();
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(n, p) {
              return {tag: 'objectaccessor', object: n.join(""), properties: p};
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_property() {
        var cacheKey = 'property@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ".") {
          var result2 = ".";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_symbol();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(t) {
          		return t.join("");
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_varSymbol() {
        var cacheKey = 'varSymbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_symbol();
        var result0 = result1 !== null
          ? (function(p) {
          		return {tag:'symbol', val: p.join("")};
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_stringc();
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {
          	return {tag: 'string', val:s};
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stringNonEscaped() {
        var cacheKey = 'stringNonEscaped@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^"\\]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[^\"\\\\]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(t) {
          	return t.join("");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stringc() {
        var cacheKey = 'stringc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "\\\"") {
          var result5 = "\\\"";
          pos += 2;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result5 !== null) {
          var result2 = result5;
        } else {
          if (input.substr(pos, 2) === "\\\\") {
            var result4 = "\\\\";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result3 = parse_stringNonEscaped();
            if (result3 !== null) {
              var result2 = result3;
            } else {
              var result2 = null;;
            };
          };
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos, 2) === "\\\"") {
              var result5 = "\\\"";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result5 !== null) {
              var result2 = result5;
            } else {
              if (input.substr(pos, 2) === "\\\\") {
                var result4 = "\\\\";
                pos += 2;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\\\\\\"");
                }
              }
              if (result4 !== null) {
                var result2 = result4;
              } else {
                var result3 = parse_stringNonEscaped();
                if (result3 !== null) {
                  var result2 = result3;
                } else {
                  var result2 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(p) {
          	return p.join("");
          })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol() {
        var cacheKey = 'symbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_text() {
        var cacheKey = 'text@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\/s\n\r	?"'\\\/ ]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\\/s\\n\\r	?\"'\\\\\\/ ]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\/s\n\r	?"'\\\/ ]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.!@#$%^&*()+-=,.<>\\/s\\n\\r	?\"'\\\\\\/ ]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(flup) { return {tag: 'text', data:flup.join("")}; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_wspace() {
        var cacheKey = 'wspace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	\\n\\r]");
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_wspaces() {
        var cacheKey = 'wspaces@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	\\n\\r]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();