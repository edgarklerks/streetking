* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Application

Description

This module defines our application's state type and an alias for its handler monad.

Synopsis

<ul>
<li>data "ApplicationException":#t:ApplicationException = "UserErrorE":#v:UserErrorE ByteString</li>
<li>data "App":#t:App = "App":#v:App {
<ul>
<li>"&#95;db":#v:_db :: Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig</li>
<li>"&#95;config":#v:_config :: Snaplet "ConfigSnaplet":ConfigSnaplet.html#t:ConfigSnaplet</li>
<li>"&#95;rnd":#v:_rnd :: Snaplet "RandomConfig":RandomSnaplet.html#t:RandomConfig</li>
<li>"&#95;nde":#v:_nde :: Snaplet "DHTConfig":NodeSnapletTest.html#t:DHTConfig</li>
<li>"&#95;notf":#v:_notf :: Snaplet "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig</li>
<li>"&#95;slock":#v:_slock :: Snaplet "Lock":LockSnaplet.html#t:Lock</li>
<li>"&#95;logcycle":#v:_logcycle :: Snaplet "Cycle":Data-ExternalLog.html#t:Cycle</li>
</ul>

}</li>
<li>"slock":#v:slock :: Lens' "App":Application.html#t:App (Snaplet "Lock":LockSnaplet.html#t:Lock)</li>
<li>"rnd":#v:rnd :: Lens' "App":Application.html#t:App (Snaplet "RandomConfig":RandomSnaplet.html#t:RandomConfig)</li>
<li>"notf":#v:notf :: Lens' "App":Application.html#t:App (Snaplet "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig)</li>
<li>"nde":#v:nde :: Lens' "App":Application.html#t:App (Snaplet "DHTConfig":NodeSnapletTest.html#t:DHTConfig)</li>
<li>"logcycle":#v:logcycle :: Lens' "App":Application.html#t:App (Snaplet "Cycle":Data-ExternalLog.html#t:Cycle)</li>
<li>"db":#v:db :: Lens' "App":Application.html#t:App (Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)</li>
<li>"config":#v:config :: Lens' "App":Application.html#t:App (Snaplet "ConfigSnaplet":ConfigSnaplet.html#t:ConfigSnaplet)</li>
<li>"getUniqueKey":#v:getUniqueKey :: "Application":Application.html#t:Application ByteString</li>
<li>"runDb":#v:runDb :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection b -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App b</li>
<li>"sendLetter":#v:sendLetter :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; "Letter":Data-Notifications.html#t:Letter -&gt; m b "App":Application.html#t:App "Letter":Data-Notifications.html#t:Letter</li>
<li>"setRead":#v:setRead :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; Integer -&gt; m b "App":Application.html#t:App ()</li>
<li>"setArchive":#v:setArchive :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; Integer -&gt; m b "App":Application.html#t:App ()</li>
<li>"checkMailBox":#v:checkMailBox :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; m b "App":Application.html#t:App "Letters":Data-Notifications.html#t:Letters</li>
<li>type "AppHandler":#t:AppHandler = Handler "App":Application.html#t:App "App":Application.html#t:App</li>
<li>type "Application":#t:Application = "AppHandler":Application.html#t:AppHandler</li>
<li>"toAeson":#v:toAeson :: "InRule":Data-InRules.html#t:InRule -&gt; ByteString</li>
<li>"writeAeson":#v:writeAeson :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeError":#v:writeError :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeResult":#v:writeResult :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeResult'":#v:writeResult-39- :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeMapable":#v:writeMapable :: "Mapable":Model-General.html#t:Mapable a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeMapables":#v:writeMapables :: "Mapable":Model-General.html#t:Mapable a =&gt; [a] -&gt; "Application":Application.html#t:Application ()</li>
<li>"getUserId":#v:getUserId :: "Application":Application.html#t:Application Integer</li>
<li>"getOParam":#v:getOParam :: ByteString -&gt; "Application":Application.html#t:Application ByteString</li>
<li>type "SqlMap":#t:SqlMap = HashMap String "SqlValue":Data-SqlTransaction.html#t:SqlValue</li>
<li>"getJson":#v:getJson :: "Application":Application.html#t:Application "SqlMap":Application.html#t:SqlMap</li>
<li>"getJsons":#v:getJsons :: "Application":Application.html#t:Application ["SqlMap":Application.html#t:SqlMap]</li>
<li>"getPagesWithDTDOrdered":#v:getPagesWithDTDOrdered :: [String] -&gt; "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application (((Integer, Integer), "Constraints":Data-Database.html#t:Constraints), "Orders":Data-Database.html#t:Orders)</li>
<li>"getPagesWithDTDOrderedAndParams":#v:getPagesWithDTDOrderedAndParams :: "SqlMap":Application.html#t:SqlMap -&gt; [String] -&gt; "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application (((Integer, Integer), "Constraints":Data-Database.html#t:Constraints), "Orders":Data-Database.html#t:Orders)</li>
<li>"getPagesWithDTD":#v:getPagesWithDTD :: "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application ((Integer, Integer), "Constraints":Data-Database.html#t:Constraints)</li>
<li>"addRole":#v:addRole :: (MonadIO (m b "DHTConfig":NodeSnapletTest.html#t:DHTConfig), MonadState "DHTConfig":NodeSnapletTest.html#t:DHTConfig (m b "DHTConfig":NodeSnapletTest.html#t:DHTConfig), MonadSnaplet m) =&gt; "Id":Data-Role.html#t:Id -&gt; ByteString -&gt; m b "App":Application.html#t:App "Proto":ProtoExtended.html#t:Proto</li>
<li>"writeError'":#v:writeError-39- :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"writeAeson'":#v:writeAeson-39- :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()</li>
<li>"internalError":#v:internalError :: String -&gt; "Application":Application.html#t:Application a</li>
<li>"runCompose":#v:runCompose :: "ComposeMonad":Data-ComposeModel.html#t:ComposeMonad a "Connection":Data-SqlTransaction.html#t:Connection a -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App (HashMap String "InRule":Data-InRules.html#t:InRule)</li>
<li>"withLockBlock":#v:withLockBlock :: Show a =&gt; Namespace -&gt; a -&gt; Handler "App":Application.html#t:App "Lock":LockSnaplet.html#t:Lock b -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App b</li>
<li>"withLockNonBlock":#v:withLockNonBlock :: Show a =&gt; Namespace -&gt; a -&gt; Handler "App":Application.html#t:App "Lock":LockSnaplet.html#t:Lock () -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App ()</li>
<li>"getLock":#v:getLock :: "Application":Application.html#t:Application "Lock":LockSnaplet.html#t:Lock</li>
</ul>

h1. Documentation

data ApplicationException

Constructors


|UserErrorE ByteString| |


Instances


|Show "ApplicationException":Application.html#t:ApplicationException| |
|Typeable "ApplicationException":Application.html#t:ApplicationException| |
|Exception "ApplicationException":Application.html#t:ApplicationException| |


data App

Constructors

App

 

Fields

<dl>
<dt>&#95;db :: Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig</dt>
<dd> </dd>
<dt>&#95;config :: Snaplet "ConfigSnaplet":ConfigSnaplet.html#t:ConfigSnaplet</dt>
<dd> </dd>
<dt>&#95;rnd :: Snaplet "RandomConfig":RandomSnaplet.html#t:RandomConfig</dt>
<dd> </dd>
<dt>&#95;nde :: Snaplet "DHTConfig":NodeSnapletTest.html#t:DHTConfig</dt>
<dd> </dd>
<dt>&#95;notf :: Snaplet "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig</dt>
<dd> </dd>
<dt>&#95;slock :: Snaplet "Lock":LockSnaplet.html#t:Lock</dt>
<dd> </dd>
<dt>&#95;logcycle :: Snaplet "Cycle":Data-ExternalLog.html#t:Cycle</dt>
<dd> </dd>
</dl>

slock :: Lens' "App":Application.html#t:App (Snaplet "Lock":LockSnaplet.html#t:Lock)

rnd :: Lens' "App":Application.html#t:App (Snaplet "RandomConfig":RandomSnaplet.html#t:RandomConfig)

notf :: Lens' "App":Application.html#t:App (Snaplet "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig)

nde :: Lens' "App":Application.html#t:App (Snaplet "DHTConfig":NodeSnapletTest.html#t:DHTConfig)

logcycle :: Lens' "App":Application.html#t:App (Snaplet "Cycle":Data-ExternalLog.html#t:Cycle)

db :: Lens' "App":Application.html#t:App (Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)

config :: Lens' "App":Application.html#t:App (Snaplet "ConfigSnaplet":ConfigSnaplet.html#t:ConfigSnaplet)

getUniqueKey :: "Application":Application.html#t:Application ByteString

runDb :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection b -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App b

sendLetter :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; "Letter":Data-Notifications.html#t:Letter -&gt; m b "App":Application.html#t:App "Letter":Data-Notifications.html#t:Letter

setRead :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; Integer -&gt; m b "App":Application.html#t:App ()

setArchive :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; Integer -&gt; m b "App":Application.html#t:App ()

checkMailBox :: (MonadState "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig (m b "NotificationConfig":NotificationSnaplet.html#t:NotificationConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadSnap (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "UserId":Data-Notifications.html#t:UserId -&gt; m b "App":Application.html#t:App "Letters":Data-Notifications.html#t:Letters

type AppHandler = Handler "App":Application.html#t:App "App":Application.html#t:App

type Application = "AppHandler":Application.html#t:AppHandler

toAeson :: "InRule":Data-InRules.html#t:InRule -&gt; ByteString

writeAeson :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write Aeson to user

writeError :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write an error to the http client

writeResult :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write a InRule to the http client

writeResult' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write a JSON to the http client

writeMapable :: "Mapable":Model-General.html#t:Mapable a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write a mapable to the client

writeMapables :: "Mapable":Model-General.html#t:Mapable a =&gt; [a] -&gt; "Application":Application.html#t:Application ()

Write multiple mapables as a json array

getUserId :: "Application":Application.html#t:Application Integer

get the user id from the proxy

getOParam :: ByteString -&gt; "Application":Application.html#t:Application ByteString

get a GET param faults when param doesn't exist

type SqlMap = HashMap String "SqlValue":Data-SqlTransaction.html#t:SqlValue

getJson :: "Application":Application.html#t:Application "SqlMap":Application.html#t:SqlMap

get json in the form of a @SqlMap@

getJsons :: "Application":Application.html#t:Application ["SqlMap":Application.html#t:SqlMap]

Get multiple jsons as a @SqlMap@

getPagesWithDTDOrdered

Arguments

:: [String]

Allowed order fields

-&gt; "DTD":Data-DatabaseTemplate.html#t:DTD

search expression

-&gt; "Application":Application.html#t:Application (((Integer, Integer), "Constraints":Data-Database.html#t:Constraints), "Orders":Data-Database.html#t:Orders)

 

Generates a constraint and returns an (((limit, offset), Constraints),Orders)

getPagesWithDTDOrderedAndParams

Arguments

:: "SqlMap":Application.html#t:SqlMap

Default values

-&gt; [String]

Allowed ordered fields

-&gt; "DTD":Data-DatabaseTemplate.html#t:DTD

search expression, see @DatabaseTemplate@

-&gt; "Application":Application.html#t:Application (((Integer, Integer), "Constraints":Data-Database.html#t:Constraints), "Orders":Data-Database.html#t:Orders)

 

Same as @getPagsWithDTDOrdered@, only then provide default values

getPagesWithDTD :: "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application ((Integer, Integer), "Constraints":Data-Database.html#t:Constraints)

Generate a constraint and a limit and offset

addRole :: (MonadIO (m b "DHTConfig":NodeSnapletTest.html#t:DHTConfig), MonadState "DHTConfig":NodeSnapletTest.html#t:DHTConfig (m b "DHTConfig":NodeSnapletTest.html#t:DHTConfig), MonadSnaplet m) =&gt; "Id":Data-Role.html#t:Id -&gt; ByteString -&gt; m b "App":Application.html#t:App "Proto":ProtoExtended.html#t:Proto

Add a role to a user id

writeError' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

write an json error

writeAeson' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

Write an error to the client

internalError :: String -&gt; "Application":Application.html#t:Application a

Throws an internal error code 500

runCompose :: "ComposeMonad":Data-ComposeModel.html#t:ComposeMonad a "Connection":Data-SqlTransaction.html#t:Connection a -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App (HashMap String "InRule":Data-InRules.html#t:InRule)

Run a composemonad in the SqlTransaction monad

withLockBlock :: Show a =&gt; Namespace -&gt; a -&gt; Handler "App":Application.html#t:App "Lock":LockSnaplet.html#t:Lock b -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App b

Do an SqlTransaction action with a non blocking lock

withLockNonBlock :: Show a =&gt; Namespace -&gt; a -&gt; Handler "App":Application.html#t:App "Lock":LockSnaplet.html#t:Lock () -&gt; Handler "App":Application.html#t:App "App":Application.html#t:App ()

Do a SqlTransaction with a blocking lock

getLock :: "Application":Application.html#t:Application "Lock":LockSnaplet.html#t:Lock

Retrieve the lock manager

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
