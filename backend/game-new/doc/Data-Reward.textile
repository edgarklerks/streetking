* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.Reward

h1. Documentation

newtype Rewards

Constructors

Rewards

 

Fields

<dl>
<dt>unRewards :: ["Reward":Data-Reward.html#t:Reward]</dt>
<dd> </dd>
</dl>

Instances


|Show "Rewards":Data-Reward.html#t:Rewards| |
|"ToInRule":Data-InRules.html#t:ToInRule "Rewards":Data-Reward.html#t:Rewards| |


data Reward

Constructors

Reward

 

Fields

<dl>
<dt>rule :: String</dt>
<dd> </dd>
<dt>name :: String</dt>
<dd> </dd>
<dt>prizes :: ["Prize":Data-Reward.html#t:Prize]</dt>
<dd> </dd>
</dl>

Instances


|Show "Reward":Data-Reward.html#t:Reward| |
|"ToInRule":Data-InRules.html#t:ToInRule "Reward":Data-Reward.html#t:Reward| |


data Prize

Constructors


|Money Integer| |
|Experience Integer| |


Instances


|Show "Prize":Data-Reward.html#t:Prize| |
|"ToInRule":Data-InRules.html#t:ToInRule "Prize":Data-Reward.html#t:Prize| |


transform :: "RewardLog":Model-RewardLog.html#t:RewardLog -&gt; "Reward":Data-Reward.html#t:Reward

testRewards :: "Rewards":Data-Reward.html#t:Rewards

transformRewards :: ["RewardLog":Model-RewardLog.html#t:RewardLog] -&gt; "Rewards":Data-Reward.html#t:Rewards

concatRewards :: "Rewards":Data-Reward.html#t:Rewards -&gt; "Rewards":Data-Reward.html#t:Rewards

checkRewardLog :: Integer -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

activateRewards :: Integer -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

saveRewardLogEvent :: [Integer] -&gt; [Integer] -&gt; [Integer] -&gt; Integer -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

extractEvent :: ["Event":Data-Event.html#t:Event] -&gt; ([Integer], [Integer], [Integer])

loadRule :: Integer -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection (String, "Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol, Bool)

runEventStream :: Integer -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection [(String, Integer, ["Event":Data-Event.html#t:Event])]

testParseRule :: IO ()

optimize :: "Expr":Data-Decider.html#t:Expr t t1 -&gt; "Expr":Data-Decider.html#t:Expr t t1

joinSame :: ["Expr":Data-Decider.html#t:Expr t t1] -&gt; ["Expr":Data-Decider.html#t:Expr t t1]

parseRule :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

manyRules :: Parser ["Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol]

testMatchRule :: IO ()

matchRule :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

fromtoE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

fromE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

toE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

allE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

anyE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

oneE :: Parser ("Expr":Data-Decider.html#t:Expr g "Symbol":Data-Event.html#t:Symbol)

matchSymbol :: Parser "Symbol":Data-Event.html#t:Symbol

tournamentI :: Parser "Symbol":Data-Event.html#t:Symbol

tournamentS :: Parser "Symbol":Data-Event.html#t:Symbol

levelI :: Parser "Symbol":Data-Event.html#t:Symbol

raceI :: Parser "Symbol":Data-Event.html#t:Symbol

raceS :: Parser "Symbol":Data-Event.html#t:Symbol

practiceI :: Parser "Symbol":Data-Event.html#t:Symbol

practiceS :: Parser "Symbol":Data-Event.html#t:Symbol

uncurry3 :: (a -&gt; b -&gt; c -&gt; d) -&gt; (a, b, c) -&gt; d

parseTriple :: Parser (Maybe Integer, Maybe Integer, Maybe Integer)

parsePair :: Parser (Maybe Integer, Maybe Integer)

parseArg :: Parser (Maybe Integer)

integer :: Parser Integer

num :: Parser Char

testTournament :: IO ()

eitherToMaybe :: Either a b -&gt; Maybe b

rewardAction :: "Event":Data-Event.html#t:Event -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ["RuleReward":Model-RuleReward.html#t:RuleReward]

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
