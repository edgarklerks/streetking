* "Contents":index.html
* "Index":doc-index.html

Â 

Safe Haskell

None

Data.SqlTransaction

Synopsis

* "quickInsert":#v:quickInsert :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; [(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "SqlValue":Data-SqlTransaction.html#t:SqlValue
* data "Connection":#t:Connection
* class "IConnection":#t:IConnection conn where
** "disconnect":#v:disconnect :: conn -&gt; IO ()
* data "SqlValue":#t:SqlValue
** = "SqlString":#v:SqlString String
** &#124; "SqlByteString":#v:SqlByteString ByteString
** &#124; "SqlWord32":#v:SqlWord32 Word32
** &#124; "SqlWord64":#v:SqlWord64 Word64
** &#124; "SqlInt32":#v:SqlInt32 Int32
** &#124; "SqlInt64":#v:SqlInt64 Int64
** &#124; "SqlInteger":#v:SqlInteger Integer
** &#124; "SqlChar":#v:SqlChar Char
** &#124; "SqlBool":#v:SqlBool Bool
** &#124; "SqlDouble":#v:SqlDouble Double
** &#124; "SqlRational":#v:SqlRational Rational
** &#124; "SqlLocalDate":#v:SqlLocalDate Day
** &#124; "SqlLocalTimeOfDay":#v:SqlLocalTimeOfDay TimeOfDay
** &#124; "SqlZonedLocalTimeOfDay":#v:SqlZonedLocalTimeOfDay TimeOfDay TimeZone
** &#124; "SqlLocalTime":#v:SqlLocalTime LocalTime
** &#124; "SqlZonedTime":#v:SqlZonedTime ZonedTime
** &#124; "SqlUTCTime":#v:SqlUTCTime UTCTime
** &#124; "SqlDiffTime":#v:SqlDiffTime NominalDiffTime
** &#124; "SqlPOSIXTime":#v:SqlPOSIXTime POSIXTime
** &#124; "SqlEpochTime":#v:SqlEpochTime Integer
** &#124; "SqlTimeDiff":#v:SqlTimeDiff Integer
** &#124; "SqlNull":#v:SqlNull
* data "Statement":#t:Statement
* "disconnect":#v:disconnect :: "IConnection":Data-SqlTransaction.html#t:IConnection conn =&gt; conn -&gt; IO ()
* data "Lock":#t:Lock
** = "AccessShare":#v:AccessShare
** &#124; "RowShare":#v:RowShare
** &#124; "RowExclusive":#v:RowExclusive
** &#124; "ShareUpdateExclusive":#v:ShareUpdateExclusive
** &#124; "Share":#v:Share
** &#124; "ShareRowExclusive":#v:ShareRowExclusive
** &#124; "AccessExclusive":#v:AccessExclusive
* type "SqlTransaction":#t:SqlTransaction c a = "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c a
* data "SqlTransactionUser":#t:SqlTransactionUser l c a
* "atomical":#v:atomical :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a
* "catchSqlError":#v:catchSqlError :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a -&gt; ("SqlError":Data-SqlTransaction.html#t:SqlError -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a) -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a
* "commit":#v:commit :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()
* "dbWithLockBlock":#v:dbWithLockBlock :: Show a =&gt; Namespace -&gt; a -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c b -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c b
* "dbWithLockNonBlock":#v:dbWithLockNonBlock :: Show a =&gt; Namespace -&gt; a -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c () -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c ()
* "doneFuture":#v:doneFuture :: Future a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Bool
* "emptyFuture":#v:emptyFuture :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Future a)
* "execute":#v:execute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer
* "executeMany":#v:executeMany :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [["SqlValue":Data-SqlTransaction.html#t:SqlValue]] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "executeRaw":#v:executeRaw :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "fetchAllRows'":#v:fetchAllRows-39- :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]
* "fetchAllRows":#v:fetchAllRows :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]
* "fetchAllRowsAL'":#v:fetchAllRowsAL-39- :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)]]
* "fetchAllRowsAL":#v:fetchAllRowsAL :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)]]
* "fetchAllRowsMap":#v:fetchAllRowsMap :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [Map String "SqlValue":Data-SqlTransaction.html#t:SqlValue]
* "fetchRow":#v:fetchRow :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe ["SqlValue":Data-SqlTransaction.html#t:SqlValue])
* "fetchRowAl":#v:fetchRowAl :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe [(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)])
* "fetchRowMap":#v:fetchRowMap :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe (Map String "SqlValue":Data-SqlTransaction.html#t:SqlValue))
* "fillFuture":#v:fillFuture :: Future a -&gt; Either "SqlError":Data-SqlTransaction.html#t:SqlError a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "finish":#v:finish :: "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "forkSqlTransaction":#v:forkSqlTransaction :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection () -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ThreadId
* "get":#v:get :: MonadState s m =&gt; m s
* "getUser":#v:getUser :: "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c l
* "lock":#v:lock :: String -&gt; "Lock":Data-SqlTransaction.html#t:Lock -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a
* "newFuture":#v:newFuture :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Future a)
* "par2":#v:par2 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c b -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (a, b)
* "par3":#v:par3 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c b -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c c -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (a, b, c)
* "par4":#v:par4 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c p -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c q -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c r -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c s -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (p, q, r, s)
* "parN":#v:parN :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; ["SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c p] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [p]
* "parSafe":#v:parSafe :: ["SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock "Connection":Data-SqlTransaction.html#t:Connection b] -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock "Connection":Data-SqlTransaction.html#t:Connection [b]
* "prepare":#v:prepare :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "Statement":Data-SqlTransaction.html#t:Statement
* "putUser":#v:putUser :: l -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c ()
* "quickQuery'":#v:quickQuery-39- :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]
* "quickQuery":#v:quickQuery :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]
* "readFuture":#v:readFuture :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; Future a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a
* "rollback":#v:rollback :: "IConnection":Data-SqlTransaction.html#t:IConnection m =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction m t
* "run":#v:run :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer
* "runSqlTransaction":#v:runSqlTransaction :: (Applicative m, MonadIO m, "IConnection":Data-SqlTransaction.html#t:IConnection conn) =&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l conn b -&gt; (String -&gt; m b) -&gt; conn -&gt; l -&gt; m b
* "runTestDb":#v:runTestDb :: "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l "Connection":Data-SqlTransaction.html#t:Connection b -&gt; IO b
* "sExecute":#v:sExecute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [Maybe String] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer
* "sExecuteMany":#v:sExecuteMany :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [[Maybe String]] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "sFetchAllRows'":#v:sFetchAllRows-39- :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[Maybe String]]
* "sFetchAllRows":#v:sFetchAllRows :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[Maybe String]]
* "sFetchRow":#v:sFetchRow :: "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe [Maybe String])
* "sRun":#v:sRun :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; [Maybe String] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer
* data "SqlError":#t:SqlError
** = "UError":#v:UError String
** &#124; "DBError":#v:DBError String
* "sqlExecute":#v:sqlExecute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()
* "sqlGetAll":#v:sqlGetAll :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]
* "sqlGetAllAssoc":#v:sqlGetAllAssoc :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [HashMap String "SqlValue":Data-SqlTransaction.html#t:SqlValue]
* "sqlGetOne":#v:sqlGetOne :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "SqlValue":Data-SqlTransaction.html#t:SqlValue
* "sqlGetRow":#v:sqlGetRow :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ["SqlValue":Data-SqlTransaction.html#t:SqlValue]
* "waitUnless":#v:waitUnless :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection Bool -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()
* "waitWhen":#v:waitWhen :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection Bool -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()
* "withEncoding":#v:withEncoding :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a

h1. Documentation

quickInsert :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; [(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "SqlValue":Data-SqlTransaction.html#t:SqlValue

quickInsert: insert data map into a single specified table. data map has the form [(field, value)]. values are SqlValues. lastval() is returned.

data Connection

Instances


|"IConnection":Data-SqlTransaction.html#t:IConnection "Connection":Data-SqlTransaction.html#t:Connection|Â |
|"Database":Model-General.html#t:Database "Connection":Data-SqlTransaction.html#t:Connection "Application":Model-Application.html#t:Application|Â |
|"Database":Model-General.html#t:Database "Connection":Data-SqlTransaction.html#t:Connection "CarInstance":Model-CarInstance.html#t:CarInstance|Â |
|"Database":Model-General.html#t:Database "Connection":Data-SqlTransaction.html#t:Connection "ParameterTable":Model-ParameterTable.html#t:ParameterTable|Â |


class IConnection conn where

Methods

disconnect :: conn -&gt; IO ()

Instances


|"IConnection":Data-SqlTransaction.html#t:IConnection ConnWrapper|Â |
|"IConnection":Data-SqlTransaction.html#t:IConnection "Connection":Data-SqlTransaction.html#t:Connection|Â |


data SqlValue

Constructors


|SqlString String|Â |
|SqlByteString ByteString|Â |
|SqlWord32 Word32|Â |
|SqlWord64 Word64|Â |
|SqlInt32 Int32|Â |
|SqlInt64 Int64|Â |
|SqlInteger Integer|Â |
|SqlChar Char|Â |
|SqlBool Bool|Â |
|SqlDouble Double|Â |
|SqlRational Rational|Â |
|SqlLocalDate Day|Â |
|SqlLocalTimeOfDay TimeOfDay|Â |
|SqlZonedLocalTimeOfDay TimeOfDay TimeZone|Â |
|SqlLocalTime LocalTime|Â |
|SqlZonedTime ZonedTime|Â |
|SqlUTCTime UTCTime|Â |
|SqlDiffTime NominalDiffTime|Â |
|SqlPOSIXTime POSIXTime|Â |
|SqlEpochTime Integer|Â |
|SqlTimeDiff Integer|Â |
|SqlNull|Â |


Instances

Eq "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Show "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Show Result

Â 

Typeable "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

IsString "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

"FromInRule":Data-InRules.html#t:FromInRule "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

"ToInRule":Data-InRules.html#t:ToInRule "SqlValue":Data-SqlTransaction.html#t:SqlValue

Renders InRule to String.

"StringLike":Data-Tools.html#t:StringLike "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

ToValues Query

Â 

ToSql Query

Â 

"Expressable":Data-Database.html#t:Expressable "Values":Data-Database.html#t:Values

Â 

"Expressable":Data-Database.html#t:Expressable "Value":Data-Database.html#t:Value

Â 

"Expression":Data-Database.html#t:Expression "Selections":Data-Database.html#t:Selections

Â 

"Expression":Data-Database.html#t:Expression "Pair":Data-Database.html#t:Pair

Â 

Convertible Bool "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Char "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Double "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Int "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Int32 "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Int64 "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Integer "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Rational "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Word32 "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Word64 "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible String "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Bool

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Char

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Double

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Int

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Int32

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Int64

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Integer

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Rational

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Word32

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Word64

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue String

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue ByteString

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue ByteString

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue TimeDiff

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Text

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Text

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue ZonedTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue UTCTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue NominalDiffTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue LocalTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue DiffTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue Day

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue ClockTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue CalendarTime

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue TimeOfDay

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue "HStore":Data-Hstore.html#t:HStore

Â 

Convertible ByteString "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible ByteString "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible TimeDiff "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Text "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Text "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible ZonedTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible UTCTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible NominalDiffTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible LocalTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible DiffTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible Day "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible ClockTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible CalendarTime "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible TimeOfDay "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible "HStore":Data-Hstore.html#t:HStore "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue a =&gt; Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue (Maybe a)

Â 

Convertible "SqlValue":Data-SqlTransaction.html#t:SqlValue (TimeOfDay, TimeZone)

Â 

Convertible a "SqlValue":Data-SqlTransaction.html#t:SqlValue =&gt; Convertible (Maybe a) "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

Convertible (TimeOfDay, TimeZone) "SqlValue":Data-SqlTransaction.html#t:SqlValue

Â 

data Statement

disconnect :: "IConnection":Data-SqlTransaction.html#t:IConnection conn =&gt; conn -&gt; IO ()

data Lock

Several locks in the postgresql database

Constructors


|AccessShare|Â |
|RowShare|Â |
|RowExclusive|Â |
|ShareUpdateExclusive|Â |
|Share|Â |
|ShareRowExclusive|Â |
|AccessExclusive|Â |


Instances


|Show "Lock":Data-SqlTransaction.html#t:Lock|Â |


type SqlTransaction c a = "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c a

Sql transaction is a monad, which encapsulate computations in a transaction By throwing an error the transaction will be rolled back The SqlTransactionUser gives the possibility to add a user state In SqlTransaction the user state is a mechanism to lock a certain operation Other capabilities are:

* paralel queries
* atomical actions
* exception catching (@Error@)
* error handling
* server level locking

The monad is hand rolled and CPS transformed for efficiency

data SqlTransactionUser l c a

This is the core monad. It is a hand rolled CPS transformed monadstack. It handles state and exception handling

It is derived from the following stack:

bc.    newtype SqlTransaction l c a = SqlTransaction {
     unsafeRunSqlTransaction :: StateT (c,l) (ErrorT String IO) a 
   } deriving (Functor, Alternative, Applicative, Monad, MonadPlus, MonadFix, MonadState c, MonadError String, MonadIO) 


Instances

MonadState c ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

MonadReader c ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

The Reader class is accessing the state. This was needed for some legacy code.

"IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; MonadError "SqlError":Data-SqlTransaction.html#t:SqlError ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

Monad ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

Functor ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

"IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; MonadPlus ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

The same as alternative

Applicative ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

MonadIO ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

"IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; Alternative ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

The alternative instance catches an error and runs the next computation when failed

atomical :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a

Explicitly encapsulates a computation in a transaction block. This commits the previous computation

catchSqlError :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a -&gt; ("SqlError":Data-SqlTransaction.html#t:SqlError -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a) -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c a

Catch an error thrown in the SqlTransaction monad, if there is an error the continuation provided by the user will be run

commit :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

Commits the current data to the database and starts a new transaction

dbWithLockBlock :: Show a =&gt; Namespace -&gt; a -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c b -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c b

Do a SqlTransaction action, lock on server level only blocks until lock is acquired

dbWithLockNonBlock :: Show a =&gt; Namespace -&gt; a -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c () -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock c ()

Do a SqlTransaction action and put a lock on the provided label. If the lock can't be acquired, don't block.

Example

bc.  withLockNonBlock namespace key $ do ... 


doneFuture :: Future a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Bool

Check if the future is done calculating

emptyFuture :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Future a)

Create an empty future

execute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer

executeMany :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [["SqlValue":Data-SqlTransaction.html#t:SqlValue]] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

executeRaw :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

fetchAllRows' :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]

fetchAllRows :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]

fetchAllRowsAL' :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)]]

fetchAllRowsAL :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)]]

fetchAllRowsMap :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [Map String "SqlValue":Data-SqlTransaction.html#t:SqlValue]

fetchRow :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe ["SqlValue":Data-SqlTransaction.html#t:SqlValue])

fetchRowAl :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe [(String, "SqlValue":Data-SqlTransaction.html#t:SqlValue)])

fetchRowMap :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe (Map String "SqlValue":Data-SqlTransaction.html#t:SqlValue))

fillFuture :: Future a -&gt; Either "SqlError":Data-SqlTransaction.html#t:SqlError a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

Fill a future with a value This is an internal function

finish :: "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

forkSqlTransaction :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection () -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ThreadId

Fork a SqlTransaction, so it can calculate the computation concurrently This shares the database connection, so it the parent should be done with all the operations on the database. Errors don't roll back the parent

get :: MonadState s m =&gt; m s

getUser :: "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c l

Retrieve the user state

lock :: String -&gt; "Lock":Data-SqlTransaction.html#t:Lock -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a

Lock a table with Lock and do a computation when locked

Example

bc.  f = lock account RowExclusive $ do ... 


newFuture

Arguments

:: "IConnection":Data-SqlTransaction.html#t:IConnection c

Â 

=&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a

calculation needed in the future

-&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Future a)

Â 

Creates a new future in the SqlTransaction monad with a calculation The database connection will be cloned, so it is safe for the parent to operate on the database

par2 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c b -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (a, b)

Run two computations paralel

par3 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c b -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c c -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (a, b, c)

Run three computations paralel

par4 :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c p -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c q -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c r -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c s -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (p, q, r, s)

Run four computations in paralel

parN :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; ["SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c p] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [p]

run n computations in paralel

parSafe :: ["SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock "Connection":Data-SqlTransaction.html#t:Connection b] -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser "Lock":LockSnaplet.html#t:Lock "Connection":Data-SqlTransaction.html#t:Connection [b]

Run queries in paralel Example:

@  parSafe [comp1, comp2, comp3]  @ This will return all the results or roll back the parent computation on an error

prepare :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "Statement":Data-SqlTransaction.html#t:Statement

putUser :: l -&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c ()

Put the user state

quickQuery' :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]

quickQuery :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]

readFuture :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; Future a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a

Read the future, this will force the calculation. Any exception will be thrown in the parent

rollback :: "IConnection":Data-SqlTransaction.html#t:IConnection m =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction m t

Rollback the computation, throws an user error

run :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer

runSqlTransaction :: (Applicative m, MonadIO m, "IConnection":Data-SqlTransaction.html#t:IConnection conn) =&gt; "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l conn b -&gt; (String -&gt; m b) -&gt; conn -&gt; l -&gt; m b

Encapsulates the computation in a transaction and handles any errors in the user supplied function

runTestDb :: "SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l "Connection":Data-SqlTransaction.html#t:Connection b -&gt; IO b

sExecute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [Maybe String] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer

sExecuteMany :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; [[Maybe String]] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

sFetchAllRows' :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[Maybe String]]

sFetchAllRows :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [[Maybe String]]

sFetchRow :: "Statement":Data-SqlTransaction.html#t:Statement -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c (Maybe [Maybe String])

sRun :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; [Maybe String] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c Integer

data SqlError

Exception data type.

Constructors

UError String

User error

DBError String

Database error

Instances

Show "SqlError":Data-SqlTransaction.html#t:SqlError

Â 

IsString "SqlError":Data-SqlTransaction.html#t:SqlError

For usability SqlError is a @IsString@

Error "SqlError":Data-SqlTransaction.html#t:SqlError

Â 

"IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; MonadError "SqlError":Data-SqlTransaction.html#t:SqlError ("SqlTransactionUser":Data-SqlTransaction.html#t:SqlTransactionUser l c)

Â 

sqlExecute :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ()

Execute a statement

sqlGetAll :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [["SqlValue":Data-SqlTransaction.html#t:SqlValue]]

Get all rows from the query

sqlGetAllAssoc :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c [HashMap String "SqlValue":Data-SqlTransaction.html#t:SqlValue]

Get all rows as a @HashMap@

sqlGetOne :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c "SqlValue":Data-SqlTransaction.html#t:SqlValue

Get the first value from the query

sqlGetRow :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; ["SqlValue":Data-SqlTransaction.html#t:SqlValue] -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c ["SqlValue":Data-SqlTransaction.html#t:SqlValue]

get one row from the query

waitUnless :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection Bool -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

The reverse of waitWhen

waitWhen :: "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection Bool -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection ()

Wait on an event in the database. If the computation returns true, go further

withEncoding :: "IConnection":Data-SqlTransaction.html#t:IConnection c =&gt; String -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a -&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction c a

Change the encoding of the database

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
