* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.HeartBeat

Synopsis

* type "Address":#t:Address = String
* data "Beat":#t:Beat where
** "Alive":#v:Alive :: "Address":Data-HeartBeat.html#t:Address -&gt; Maybe ByteString -&gt; "Beat":Data-HeartBeat.html#t:Beat
** "Error":#v:Error :: "Beat":Data-HeartBeat.html#t:Beat
* type "ClientC":#t:ClientC = Either String () -&gt; IO (Maybe ByteString)
* type "ServerC":#t:ServerC = "Beat":Data-HeartBeat.html#t:Beat -&gt; IO (Either String ())
* "delay":#v:delay :: Int
* "checkin":#v:checkin :: "Address":Data-HeartBeat.html#t:Address -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ClientC":Data-HeartBeat.html#t:ClientC -&gt; IO ()
* "hotelManager":#v:hotelManager :: "Cycle":Data-ExternalLog.html#t:Cycle -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ServerC":Data-HeartBeat.html#t:ServerC -&gt; IO ()
* "hotelManager'":#v:hotelManager-39- :: "Cycle":Data-ExternalLog.html#t:Cycle -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ServerC":Data-HeartBeat.html#t:ServerC -&gt; IO ()
* "testHeartBeat":#v:testHeartBeat :: IO ()

h1. Documentation

type Address = String

* - We need to a way to let the proxy server know, that a client is: - &#42; Still alive - &#42; Wants to be connected - - We can do this by a heartbeat. Send over a separate channel. - - The proxy server has a server running, which accepts new connections. - A backend server can connect to the proxy and announce itself. - The proxy can accept it or decline it. - In accept the backend server sends every n seconds a alive beat. - - This can be extended by some statistics to make the load-balancing - function more advanced. - &#124;

data Beat where

Constructors


|Alive :: "Address":Data-HeartBeat.html#t:Address -&gt; Maybe ByteString -&gt; "Beat":Data-HeartBeat.html#t:Beat| |
|Error :: "Beat":Data-HeartBeat.html#t:Beat| |


Instances


|Show "Beat":Data-HeartBeat.html#t:Beat| |
|Serialize "Beat":Data-HeartBeat.html#t:Beat| |


type ClientC = Either String () -&gt; IO (Maybe ByteString)

type ServerC = "Beat":Data-HeartBeat.html#t:Beat -&gt; IO (Either String ())

delay :: Int

checkin :: "Address":Data-HeartBeat.html#t:Address -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ClientC":Data-HeartBeat.html#t:ClientC -&gt; IO ()

check your self into a proxy and start heartbeating

hotelManager :: "Cycle":Data-ExternalLog.html#t:Cycle -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ServerC":Data-HeartBeat.html#t:ServerC -&gt; IO ()

handle authorizations by binding to the address

hotelManager' :: "Cycle":Data-ExternalLog.html#t:Cycle -&gt; "Address":Data-HeartBeat.html#t:Address -&gt; "ServerC":Data-HeartBeat.html#t:ServerC -&gt; IO ()

testHeartBeat :: IO ()

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
