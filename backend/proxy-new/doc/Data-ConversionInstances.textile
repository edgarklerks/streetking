* "Contents":index.html
* "Index":doc-index.html

Â 

Safe Haskell

None

Data.ConversionInstances

Description

Instances for conversions Edgar - added gzip to the object encode / decoding instances

Synopsis

* "double2Float":#v:double2Float :: Double -&gt; Float
* "float2Double":#v:float2Double :: Float -&gt; Double
* "convFromSql":#v:convFromSql :: "SqlValue":Data-SqlTransaction.html#t:SqlValue -&gt; "InRule":Data-InRules.html#t:InRule
* "convSql":#v:convSql :: "InRule":Data-InRules.html#t:InRule -&gt; "SqlValue":Data-SqlTransaction.html#t:SqlValue
* "put8":#v:put8 :: Word8 -&gt; Put
* "toWord64":#v:toWord64 :: Int -&gt; Word64
* "put8b":#v:put8b :: Word8 -&gt; Put
* "serializeHashMapb":#v:serializeHashMapb :: (Binary t1, Binary t) =&gt; HashMap t t1 -&gt; PutM ()
* "serializeHashMap":#v:serializeHashMap :: (Serialize t1, Serialize t) =&gt; HashMap t t1 -&gt; PutM ()

h1. Documentation

double2Float :: Double -&gt; Float

float2Double :: Float -&gt; Double

convFromSql :: "SqlValue":Data-SqlTransaction.html#t:SqlValue -&gt; "InRule":Data-InRules.html#t:InRule

Convert an sql value to a InRule and decode a binary blob The pipeline looks like this:

bc.  decode :: (SqlValue -> Either error B.ByteString)
 S.decode :: (B.ByteString -> Either error InRule)


base64 &#124; / decode &#124; binary gzip data &#124;/ quicklz &#124; serialized data / @decode@ &#124; &#124;/ InRule

Convert an SqlValue to a InRule

convSql :: "InRule":Data-InRules.html#t:InRule -&gt; "SqlValue":Data-SqlTransaction.html#t:SqlValue

Convert a InRule to a SqlValu

put8 :: Word8 -&gt; Put

Put a word in a @Put@ monad

toWord64 :: Int -&gt; Word64

Change a integer into a Word64

put8b :: Word8 -&gt; Put

Put a word in a @Put@ monad

serializeHashMapb :: (Binary t1, Binary t) =&gt; HashMap t t1 -&gt; PutM ()

serializeHashMap :: (Serialize t1, Serialize t) =&gt; HashMap t t1 -&gt; PutM ()

Serialize a hashmap, internal helper function

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
