* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.Role

Synopsis

<ul>
<li>type "RolePair":#t:RolePair k = ("TimedMap":Data-TimedMap.html#t:TimedMap k ["Role":Data-Role.html#t:Role], "RoleSetMap":Data-Role.html#t:RoleSetMap)</li>
<li>data "RoleSetFile":#t:RoleSetFile
<ul>
<li>= "Roles":#v:Roles [String] ["RoleSetFile":Data-Role.html#t:RoleSetFile]</li>
<li>&#124; "Resource":#v:Resource String [String]</li>
</ul>
</li>
<li>data "RestRight":#t:RestRight
<ul>
<li>= "Put":#v:Put</li>
<li>&#124; "Get":#v:Get</li>
<li>&#124; "Post":#v:Post</li>
<li>&#124; "Delete":#v:Delete</li>
</ul>
</li>
<li>newtype "RoleSetMap":#t:RoleSetMap = "RSM":#v:RSM {
<ul>
<li>"unRSM":#v:unRSM :: TVar "RoleSet":Data-Role.html#t:RoleSet</li>
</ul>

}</li>
<li>type "Resource":#t:Resource = String</li>
<li>type "Id":#t:Id = Integer</li>
<li>data "Role":#t:Role
<ul>
<li>= "Developer":#v:Developer (Maybe "Id":Data-Role.html#t:Id)</li>
<li>&#124; "User":#v:User (Maybe "Id":Data-Role.html#t:Id)</li>
<li>&#124; "Server":#v:Server (Maybe "Id":Data-Role.html#t:Id)</li>
<li>&#124; "All":#v:All</li>
</ul>
</li>
<li>data "OpaqueRole":#t:OpaqueRole
<ul>
<li>= "ODeveloper":#v:ODeveloper</li>
<li>&#124; "OUser":#v:OUser</li>
<li>&#124; "OServer":#v:OServer</li>
<li>&#124; "OAll":#v:OAll</li>
</ul>
</li>
<li>"viewOpaque":#v:viewOpaque :: "Role":Data-Role.html#t:Role -&gt; "OpaqueRole":Data-Role.html#t:OpaqueRole</li>
<li>newtype "RoleSet":#t:RoleSet = "RS":#v:RS {
<ul>
<li>"unRS":#v:unRS :: Map "Resource":Data-Role.html#t:Resource (Map "Role":Data-Role.html#t:Role ["RestRight":Data-Role.html#t:RestRight])</li>
</ul>

}</li>
<li>"initRP":#v:initRP :: MonadIO m =&gt; FilePath -&gt; m ("RolePair":Data-Role.html#t:RolePair ByteString)</li>
<li>"fileStore":#v:fileStore :: FilePath -&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore ByteString ["Role":Data-Role.html#t:Role]</li>
<li>"fileRestore":#v:fileRestore :: FilePath -&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore ByteString ["Role":Data-Role.html#t:Role]</li>
<li>"voidStore":#v:voidStore :: Ord k =&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore k a</li>
<li>"voidRestore":#v:voidRestore :: Ord k =&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore k a</li>
<li>"getRoles":#v:getRoles :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ["Role":Data-Role.html#t:Role]</li>
<li>"updateTimeRole":#v:updateTimeRole :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ()</li>
<li>"may":#v:may :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "Resource":Data-Role.html#t:Resource -&gt; "Role":Data-Role.html#t:Role -&gt; "RestRight":Data-Role.html#t:RestRight -&gt; m Bool</li>
<li>"addRole":#v:addRole :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; "Role":Data-Role.html#t:Role -&gt; m ()</li>
<li>"dropRoles":#v:dropRoles :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ()</li>
<li>"runCleanup":#v:runCleanup :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; Int64 -&gt; IO ()</li>
<li>"initCleanup":#v:initCleanup :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; Int64 -&gt; IO ThreadId</li>
<li>"initStore":#v:initStore :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore ByteString ["Role":Data-Role.html#t:Role] -&gt; IO ThreadId</li>
<li>"runRestore":#v:runRestore :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore ByteString ["Role":Data-Role.html#t:Role] -&gt; IO ()</li>
<li>"dumpAll":#v:dumpAll :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; m String</li>
<li>"may'":#v:may-39- :: "RoleSet":Data-Role.html#t:RoleSet -&gt; "Resource":Data-Role.html#t:Resource -&gt; "Role":Data-Role.html#t:Role -&gt; "RestRight":Data-Role.html#t:RestRight -&gt; Bool</li>
<li>"roleSet":#v:roleSet :: Parser "RoleSetFile":Data-Role.html#t:RoleSetFile</li>
<li>"roleResources":#v:roleResources :: Parser [(String, [String])]</li>
<li>"roleHeader":#v:roleHeader :: Parser [String]</li>
<li>"resourceRule":#v:resourceRule :: Parser (String, [String])</li>
<li>"hsep":#v:hsep :: Parser Char</li>
<li>"defs":#v:defs :: Parser String</li>
<li>"vsepB":#v:vsepB :: Parser Char</li>
<li>"vsepH0":#v:vsepH0 :: Parser String</li>
<li>"vsepH":#v:vsepH :: Parser String</li>
<li>"roles":#v:roles :: Parser String</li>
<li>"identifier":#v:identifier :: Parser Char</li>
<li>"zipRoleSet":#v:zipRoleSet :: "RoleSetFile":Data-Role.html#t:RoleSetFile -&gt; "RoleSet":Data-Role.html#t:RoleSet</li>
<li>"readRole":#v:readRole :: String -&gt; "Role":Data-Role.html#t:Role</li>
</ul>

h1. Documentation

type RolePair k = ("TimedMap":Data-TimedMap.html#t:TimedMap k ["Role":Data-Role.html#t:Role], "RoleSetMap":Data-Role.html#t:RoleSetMap)

data RoleSetFile

Constructors


|Roles [String] ["RoleSetFile":Data-Role.html#t:RoleSetFile]| |
|Resource String [String]| |


Instances


|Show "RoleSetFile":Data-Role.html#t:RoleSetFile| |


data RestRight

Constructors


|Put| |
|Get| |
|Post| |
|Delete| |


Instances


|Eq "RestRight":Data-Role.html#t:RestRight| |
|Show "RestRight":Data-Role.html#t:RestRight| |


newtype RoleSetMap

Constructors

RSM

 

Fields

<dl>
<dt>unRSM :: TVar "RoleSet":Data-Role.html#t:RoleSet</dt>
<dd> </dd>
</dl>

type Resource = String

type Id = Integer

data Role

Constructors


|Developer (Maybe "Id":Data-Role.html#t:Id)| |
|User (Maybe "Id":Data-Role.html#t:Id)| |
|Server (Maybe "Id":Data-Role.html#t:Id)| |
|All| |


Instances


|Eq "Role":Data-Role.html#t:Role| |
|Ord "Role":Data-Role.html#t:Role| |
|Read "Role":Data-Role.html#t:Role| |
|Show "Role":Data-Role.html#t:Role| |
|Binary "Role":Data-Role.html#t:Role| |


data OpaqueRole

Constructors


|ODeveloper| |
|OUser| |
|OServer| |
|OAll| |


Instances


|Eq "OpaqueRole":Data-Role.html#t:OpaqueRole| |
|Ord "OpaqueRole":Data-Role.html#t:OpaqueRole| |
|Show "OpaqueRole":Data-Role.html#t:OpaqueRole| |


viewOpaque :: "Role":Data-Role.html#t:Role -&gt; "OpaqueRole":Data-Role.html#t:OpaqueRole

newtype RoleSet

Constructors

RS

 

Fields

<dl>
<dt>unRS :: Map "Resource":Data-Role.html#t:Resource (Map "Role":Data-Role.html#t:Role ["RestRight":Data-Role.html#t:RestRight])</dt>
<dd> </dd>
</dl>

Instances


|Show "RoleSet":Data-Role.html#t:RoleSet| |


initRP :: MonadIO m =&gt; FilePath -&gt; m ("RolePair":Data-Role.html#t:RolePair ByteString)

fileStore :: FilePath -&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore ByteString ["Role":Data-Role.html#t:Role]

File store handler

fileRestore :: FilePath -&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore ByteString ["Role":Data-Role.html#t:Role]

File restore handler

voidStore :: Ord k =&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore k a

Empty Store handler

voidRestore :: Ord k =&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore k a

Empty Restore handler

getRoles :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ["Role":Data-Role.html#t:Role]

Retrieve all the roles from a RoleState from the given token.

updateTimeRole :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ()

may :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "Resource":Data-Role.html#t:Resource -&gt; "Role":Data-Role.html#t:Role -&gt; "RestRight":Data-Role.html#t:RestRight -&gt; m Bool

Lookup from the RoleState if a user may access a resource as role with restright

addRole :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; "Role":Data-Role.html#t:Role -&gt; m ()

Adds a role to the RoleState under the given token.

dropRoles :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; ByteString -&gt; m ()

Drop all the roles from token in the RoleState

runCleanup :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; Int64 -&gt; IO ()

Cleanup all expired tokens

initCleanup :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; Int64 -&gt; IO ThreadId

Start separated thread to cleanup all tokens wich are expired

initStore :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "TimedMapStore":Data-TimedMap.html#t:TimedMapStore ByteString ["Role":Data-Role.html#t:Role] -&gt; IO ThreadId

Start the storing thread, which periodically stores the whole RoleState with the given handler

runRestore :: "RolePair":Data-Role.html#t:RolePair ByteString -&gt; "TimedMapRestore":Data-TimedMap.html#t:TimedMapRestore ByteString ["Role":Data-Role.html#t:Role] -&gt; IO ()

Restore the roleState from the given handler

dumpAll :: MonadIO m =&gt; "RolePair":Data-Role.html#t:RolePair ByteString -&gt; m String

Debug function to dump the internal state

may' :: "RoleSet":Data-Role.html#t:RoleSet -&gt; "Resource":Data-Role.html#t:Resource -&gt; "Role":Data-Role.html#t:Role -&gt; "RestRight":Data-Role.html#t:RestRight -&gt; Bool

Pure function to lookup from a RoleSet if a Role can acces a resource under the given rights

roleSet :: Parser "RoleSetFile":Data-Role.html#t:RoleSetFile

roleResources :: Parser [(String, [String])]

roleHeader :: Parser [String]

resourceRule :: Parser (String, [String])

hsep :: Parser Char

defs :: Parser String

vsepB :: Parser Char

vsepH0 :: Parser String

vsepH :: Parser String

roles :: Parser String

identifier :: Parser Char

zipRoleSet :: "RoleSetFile":Data-Role.html#t:RoleSetFile -&gt; "RoleSet":Data-Role.html#t:RoleSet

readRole :: String -&gt; "Role":Data-Role.html#t:Role

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
