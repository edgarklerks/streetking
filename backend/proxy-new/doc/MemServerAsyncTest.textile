* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

MemServerAsyncTest

Synopsis

<ul>
<li>newtype "ProtoMonad":#t:ProtoMonad c a = "ProtoMonad":#v:ProtoMonad {
<ul>
<li>"unProtoMonad":#v:unProtoMonad :: ReaderT c IO a</li>
</ul>

}</li>
<li>"runProtoMonad":#v:runProtoMonad :: c -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a -&gt; IO a</li>
<li>type "RequestMonad":#t:RequestMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "RequestConfig":MemServerAsyncTest.html#t:RequestConfig</li>
<li>"startNode":#v:startNode :: "ConfigParameters":MemServerAsyncTest.html#t:ConfigParameters -&gt; IO ("RequestConfig":MemServerAsyncTest.html#t:RequestConfig, "IncomingConfig":MemServerAsyncTest.html#t:IncomingConfig, "UpdateConfig":MemServerAsyncTest.html#t:UpdateConfig)</li>
<li>data "ConfigParameters":#t:ConfigParameters = "RP":#v:RP {
<ul>
<li>"param&#95;pull":#v:param_pull :: String</li>
<li>"param&#95;req":#v:param_req :: String</li>
<li>"param&#95;qc":#v:param_qc :: "QueryChan":Data-MemTimeState.html#t:QueryChan</li>
<li>"debug":#v:debug :: Bool</li>
</ul>

}</li>
<li>data "RequestConfig":#t:RequestConfig = "PC":#v:PC {
<ul>
<li>"pc&#95;context":#v:pc_context :: Context</li>
<li>"pc&#95;memstate":#v:pc_memstate :: "QueryChan":Data-MemTimeState.html#t:QueryChan</li>
<li>"pc&#95;request":#v:pc_request :: "RequestSocket":MemServerAsyncTest.html#t:RequestSocket</li>
<li>"pc&#95;upstream&#95;map":#v:pc_upstream_map :: "UpstreamMap":MemServerAsyncTest.html#t:UpstreamMap</li>
<li>"pc&#95;request&#95;answer&#95;chan":#v:pc_request_answer_chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</li>
<li>"pc&#95;address":#v:pc_address :: "NodeAddr":ProtoExtended.html#t:NodeAddr</li>
<li>"pc&#95;incoming":#v:pc_incoming :: "NodeAddr":ProtoExtended.html#t:NodeAddr</li>
<li>"pc&#95;debug":#v:pc_debug :: Bool</li>
<li>"pc&#95;log":#v:pc_log :: TQueue String</li>
</ul>

}</li>
<li>type "UpstreamMap":#t:UpstreamMap = TVar (HashMap "NodeAddr":ProtoExtended.html#t:NodeAddr "UpstreamSocket":MemServerAsyncTest.html#t:UpstreamSocket)</li>
<li>type "RequestSocket":#t:RequestSocket = Socket Rep</li>
<li>type "UpstreamSocket":#t:UpstreamSocket = Socket Req</li>
<li>"requestEngine":#v:requestEngine :: "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"handleQuery":#v:handleQuery :: "RequestSocket":MemServerAsyncTest.html#t:RequestSocket -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"sendAnswer":#v:sendAnswer :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"handleCommand":#v:handleCommand :: Sender a =&gt; Socket a -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"connectToNode":#v:connectToNode :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"runMemQuery":#v:runMemQuery :: "Query":Data-MemTimeState.html#t:Query -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad "Result":Data-MemTimeState.html#t:Result</li>
<li>"toNodes":#v:toNodes :: "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>"sendUpstream":#v:sendUpstream :: "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()</li>
<li>type "UpdateMonad":#t:UpdateMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "UpdateConfig":MemServerAsyncTest.html#t:UpdateConfig</li>
<li>data "UpdateConfig":#t:UpdateConfig = "UC":#v:UC {
<ul>
<li>"uc&#95;context":#v:uc_context :: Context</li>
<li>"uc&#95;updates&#95;map":#v:uc_updates_map :: "UpdatesMap":MemServerAsyncTest.html#t:UpdatesMap</li>
<li>"uc&#95;request&#95;answer&#95;chan":#v:uc_request_answer_chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</li>
<li>"uc&#95;debug":#v:uc_debug :: Bool</li>
<li>"uc&#95;log":#v:uc_log :: TQueue String</li>
</ul>

}</li>
<li>type "UpdatesMap":#t:UpdatesMap = TVar (HashMap "NodeAddr":ProtoExtended.html#t:NodeAddr "UpdatesSocket":MemServerAsyncTest.html#t:UpdatesSocket)</li>
<li>type "UpdatesSocket":#t:UpdatesSocket = Socket Push</li>
<li>"updateEngine":#v:updateEngine :: "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad ()</li>
<li>"toClient":#v:toClient :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad ()</li>
<li>data "IncomingConfig":#t:IncomingConfig = "IC":#v:IC {
<ul>
<li>"ic&#95;context":#v:ic_context :: Context</li>
<li>"ic&#95;incoming":#v:ic_incoming :: "Incoming":MemServerAsyncTest.html#t:Incoming</li>
<li>"ic&#95;request&#95;answer&#95;chan":#v:ic_request_answer_chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</li>
<li>"ic&#95;debug":#v:ic_debug :: Bool</li>
<li>"ic&#95;log":#v:ic_log :: TQueue String</li>
</ul>

}</li>
<li>type "Incoming":#t:Incoming = Socket Pull</li>
<li>type "IncomingMonad":#t:IncomingMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "IncomingConfig":MemServerAsyncTest.html#t:IncomingConfig</li>
<li>"incomingEngine":#v:incomingEngine :: "IncomingMonad":MemServerAsyncTest.html#t:IncomingMonad ()</li>
<li>"receiveProto":#v:receiveProto :: (MonadIO m, Receiver a, "PrintDebug":MemServerAsyncTest.html#t:PrintDebug m) =&gt; Socket a -&gt; m "Proto":ProtoExtended.html#t:Proto</li>
<li>"sendProto":#v:sendProto :: ("PrintDebug":MemServerAsyncTest.html#t:PrintDebug m, MonadIO m, Sender a) =&gt; Socket a -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; m ()</li>
<li>"asksTVar":#v:asksTVar :: (c -&gt; TVar a) -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a</li>
<li>"modifysTVar":#v:modifysTVar :: (c -&gt; TVar a) -&gt; (a -&gt; a) -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c ()</li>
<li>"liftSTM":#v:liftSTM :: STM a -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a</li>
<li>"queryNode":#v:queryNode :: "QueryChan":Data-MemTimeState.html#t:QueryChan -&gt; Socket Pull -&gt; Socket Req -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto</li>
<li>"get&#95;ic&#95;config":#v:get_ic_config :: (t, t1, t2) -&gt; t1</li>
<li>"get&#95;pc&#95;config":#v:get_pc_config :: (t, t1, t2) -&gt; t</li>
<li>"get&#95;uc&#95;config":#v:get_uc_config :: (t, t1, t2) -&gt; t2</li>
<li>"client'":#v:client-39- :: Socket Pull -&gt; Socket Req -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto</li>
<li>"tryTakeMVarT":#v:tryTakeMVarT :: Int -&gt; MVar "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto</li>
<li>class "PrintDebug":#t:PrintDebug m where
<ul>
<li>"printDebug":#v:printDebug :: Show a =&gt; a -&gt; m ()</li>
</ul>
</li>
<li>"clientCommand":#v:clientCommand :: String -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO ()</li>
</ul>

h1. Documentation

newtype ProtoMonad c a

Constructors

ProtoMonad

 

Fields

<dl>
<dt>unProtoMonad :: ReaderT c IO a</dt>
<dd> </dd>
</dl>

Instances


|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "IncomingMonad":MemServerAsyncTest.html#t:IncomingMonad| |
|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad| |
|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "RequestMonad":MemServerAsyncTest.html#t:RequestMonad| |
|MonadReader c ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|Monad ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|Functor ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|MonadPlus ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|Applicative ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|MonadIO ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|Alternative ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |
|MonadCatchIO ("ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c)| |


runProtoMonad :: c -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a -&gt; IO a

type RequestMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "RequestConfig":MemServerAsyncTest.html#t:RequestConfig

Request engine, - accepts incoming requests and processes them &#124;

startNode :: "ConfigParameters":MemServerAsyncTest.html#t:ConfigParameters -&gt; IO ("RequestConfig":MemServerAsyncTest.html#t:RequestConfig, "IncomingConfig":MemServerAsyncTest.html#t:IncomingConfig, "UpdateConfig":MemServerAsyncTest.html#t:UpdateConfig)

data ConfigParameters

Constructors

RP

 

Fields

<dl>
<dt>param&#95;pull :: String</dt>
<dd> </dd>
<dt>param&#95;req :: String</dt>
<dd> </dd>
<dt>param&#95;qc :: "QueryChan":Data-MemTimeState.html#t:QueryChan</dt>
<dd> </dd>
<dt>debug :: Bool</dt>
<dd> </dd>
</dl>

data RequestConfig

Constructors

PC

 

Fields

<dl>
<dt>pc&#95;context :: Context</dt>
<dd> </dd>
<dt>pc&#95;memstate :: "QueryChan":Data-MemTimeState.html#t:QueryChan</dt>
<dd> </dd>
<dt>pc&#95;request :: "RequestSocket":MemServerAsyncTest.html#t:RequestSocket</dt>
<dd> </dd>
<dt>pc&#95;upstream&#95;map :: "UpstreamMap":MemServerAsyncTest.html#t:UpstreamMap</dt>
<dd> </dd>
<dt>pc&#95;request&#95;answer&#95;chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</dt>
<dd> </dd>
<dt>pc&#95;address :: "NodeAddr":ProtoExtended.html#t:NodeAddr</dt>
<dd> </dd>
<dt>pc&#95;incoming :: "NodeAddr":ProtoExtended.html#t:NodeAddr</dt>
<dd> </dd>
<dt>pc&#95;debug :: Bool</dt>
<dd> </dd>
<dt>pc&#95;log :: TQueue String</dt>
<dd> </dd>
</dl>

Instances


|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "RequestMonad":MemServerAsyncTest.html#t:RequestMonad| |


type UpstreamMap = TVar (HashMap "NodeAddr":ProtoExtended.html#t:NodeAddr "UpstreamSocket":MemServerAsyncTest.html#t:UpstreamSocket)

type RequestSocket = Socket Rep

type UpstreamSocket = Socket Req

requestEngine :: "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

handleQuery :: "RequestSocket":MemServerAsyncTest.html#t:RequestSocket -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

sendAnswer :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

handleCommand :: Sender a =&gt; Socket a -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

connectToNode :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

runMemQuery :: "Query":Data-MemTimeState.html#t:Query -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad "Result":Data-MemTimeState.html#t:Result

toNodes :: "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

sendUpstream :: "Proto":ProtoExtended.html#t:Proto -&gt; "RequestMonad":MemServerAsyncTest.html#t:RequestMonad ()

type UpdateMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "UpdateConfig":MemServerAsyncTest.html#t:UpdateConfig

Update engine, - accepts a local update and processes them &#124;

data UpdateConfig

Constructors

UC

 

Fields

<dl>
<dt>uc&#95;context :: Context</dt>
<dd> </dd>
<dt>uc&#95;updates&#95;map :: "UpdatesMap":MemServerAsyncTest.html#t:UpdatesMap</dt>
<dd> </dd>
<dt>uc&#95;request&#95;answer&#95;chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</dt>
<dd> </dd>
<dt>uc&#95;debug :: Bool</dt>
<dd> </dd>
<dt>uc&#95;log :: TQueue String</dt>
<dd> </dd>
</dl>

Instances


|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad| |


type UpdatesMap = TVar (HashMap "NodeAddr":ProtoExtended.html#t:NodeAddr "UpdatesSocket":MemServerAsyncTest.html#t:UpdatesSocket)

type UpdatesSocket = Socket Push

updateEngine :: "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad ()

toClient :: "NodeAddr":ProtoExtended.html#t:NodeAddr -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad ()

data IncomingConfig

Constructors

IC

 

Fields

<dl>
<dt>ic&#95;context :: Context</dt>
<dd> </dd>
<dt>ic&#95;incoming :: "Incoming":MemServerAsyncTest.html#t:Incoming</dt>
<dd> </dd>
<dt>ic&#95;request&#95;answer&#95;chan :: TQueue ("NodeAddr":ProtoExtended.html#t:NodeAddr, "Proto":ProtoExtended.html#t:Proto)</dt>
<dd> </dd>
<dt>ic&#95;debug :: Bool</dt>
<dd> </dd>
<dt>ic&#95;log :: TQueue String</dt>
<dd> </dd>
</dl>

Instances


|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "IncomingMonad":MemServerAsyncTest.html#t:IncomingMonad| |


type Incoming = Socket Pull

type IncomingMonad = "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad "IncomingConfig":MemServerAsyncTest.html#t:IncomingConfig

incomingEngine :: "IncomingMonad":MemServerAsyncTest.html#t:IncomingMonad ()

receiveProto :: (MonadIO m, Receiver a, "PrintDebug":MemServerAsyncTest.html#t:PrintDebug m) =&gt; Socket a -&gt; m "Proto":ProtoExtended.html#t:Proto

Some tools &#124;

sendProto :: ("PrintDebug":MemServerAsyncTest.html#t:PrintDebug m, MonadIO m, Sender a) =&gt; Socket a -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; m ()

asksTVar :: (c -&gt; TVar a) -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a

modifysTVar :: (c -&gt; TVar a) -&gt; (a -&gt; a) -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c ()

liftSTM :: STM a -&gt; "ProtoMonad":MemServerAsyncTest.html#t:ProtoMonad c a

queryNode :: "QueryChan":Data-MemTimeState.html#t:QueryChan -&gt; Socket Pull -&gt; Socket Req -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto

get&#95;ic&#95;config :: (t, t1, t2) -&gt; t1

get&#95;pc&#95;config :: (t, t1, t2) -&gt; t

get&#95;uc&#95;config :: (t, t1, t2) -&gt; t2

client' :: Socket Pull -&gt; Socket Req -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto

tryTakeMVarT :: Int -&gt; MVar "Proto":ProtoExtended.html#t:Proto -&gt; IO "Proto":ProtoExtended.html#t:Proto

class PrintDebug m where

Methods

printDebug :: Show a =&gt; a -&gt; m ()

Instances


|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug IO| |
|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "IncomingMonad":MemServerAsyncTest.html#t:IncomingMonad| |
|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "UpdateMonad":MemServerAsyncTest.html#t:UpdateMonad| |
|"PrintDebug":MemServerAsyncTest.html#t:PrintDebug "RequestMonad":MemServerAsyncTest.html#t:RequestMonad| |


clientCommand :: String -&gt; String -&gt; "Proto":ProtoExtended.html#t:Proto -&gt; IO ()

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
