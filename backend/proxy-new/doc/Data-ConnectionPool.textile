* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.ConnectionPool

Description

Connection pool used for sharing database connections between threads

Synopsis

<ul>
<li>"c":#v:c :: IO "Connection":Data-SqlTransaction.html#t:Connection</li>
<li>"happyTest":#v:happyTest :: IO ()</li>
<li>type "Pointer":#t:Pointer = Int</li>
<li>newtype "ConnectionContext":#t:ConnectionContext = "ConnectionContext":#v:ConnectionContext {
<ul>
<li>"unConnectionContext":#v:unConnectionContext :: (Int, "Connection":Data-SqlTransaction.html#t:Connection)</li>
</ul>

}</li>
<li>data "ConnectionBucket":#t:ConnectionBucket
<ul>
<li>= "Empty":#v:Empty "Connection":Data-SqlTransaction.html#t:Connection Int</li>
<li>&#124; "Filled":#v:Filled "Connection":Data-SqlTransaction.html#t:Connection</li>
</ul>
</li>
<li>newtype "ConnectionPool":#t:ConnectionPool = "ConnectionPool":#v:ConnectionPool {
<ul>
<li>"unConnectionPool":#v:unConnectionPool :: (TQueue "Pointer":Data-ConnectionPool.html#t:Pointer, TArray Int "ConnectionBucket":Data-ConnectionPool.html#t:ConnectionBucket)</li>
</ul>

}</li>
<li>"initConnectionPool":#v:initConnectionPool :: Int -&gt; IO "Connection":Data-SqlTransaction.html#t:Connection -&gt; IO "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool</li>
<li>"emptyConnectionBucket":#v:emptyConnectionBucket :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; Int -&gt; STM ()</li>
<li>"fillConnectionBucket":#v:fillConnectionBucket :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; STM ()</li>
<li>"reviveConnection":#v:reviveConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; IO "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext</li>
<li>"putConnection":#v:putConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; "Connection":Data-SqlTransaction.html#t:Connection -&gt; STM ()</li>
<li>"getConnection":#v:getConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; IO "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext</li>
<li>"returnConnection":#v:returnConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; IO ()</li>
<li>"unwrapContext":#v:unwrapContext :: "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; "Connection":Data-SqlTransaction.html#t:Connection</li>
<li>"unsafeGetConnection":#v:unsafeGetConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; STM "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext</li>
<li>"initConnectionReclaimer":#v:initConnectionReclaimer :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; IO ThreadId</li>
</ul>

h1. Documentation

c :: IO "Connection":Data-SqlTransaction.html#t:Connection

happyTest :: IO ()

type Pointer = Int

newtype ConnectionContext

A connection context is a numbered connection

Constructors

ConnectionContext

 

Fields

<dl>
<dt>unConnectionContext :: (Int, "Connection":Data-SqlTransaction.html#t:Connection)</dt>
<dd> </dd>
</dl>

data ConnectionBucket

A connection bucket can be empty or full If it is empty, it remembers it's connection number

Constructors


|Empty "Connection":Data-SqlTransaction.html#t:Connection Int| |
|Filled "Connection":Data-SqlTransaction.html#t:Connection| |


Instances

Show "ConnectionBucket":Data-ConnectionPool.html#t:ConnectionBucket

Show instance for debugging

newtype ConnectionPool

The pool is a ring of unused connections and an array of buckets

Constructors

ConnectionPool

 

Fields

<dl>
<dt>unConnectionPool :: (TQueue "Pointer":Data-ConnectionPool.html#t:Pointer, TArray Int "ConnectionBucket":Data-ConnectionPool.html#t:ConnectionBucket)</dt>
<dd> </dd>
</dl>

initConnectionPool :: Int -&gt; IO "Connection":Data-SqlTransaction.html#t:Connection -&gt; IO "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool

Startup n connections

emptyConnectionBucket :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; Int -&gt; STM ()

Empty a connection bucket

fillConnectionBucket :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; STM ()

fill a connection bucket

reviveConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; IO "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext

revive a connection (if it is dead)

putConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; "Connection":Data-SqlTransaction.html#t:Connection -&gt; STM ()

Put a connection back into the pool

getConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; IO "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext

Get a connection from the pool

returnConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; IO ()

Return a connection to the pool

unwrapContext :: "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext -&gt; "Connection":Data-SqlTransaction.html#t:Connection

Unwrap a connection

unsafeGetConnection :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; STM "ConnectionContext":Data-ConnectionPool.html#t:ConnectionContext

Unsafely get a connection from the pool

initConnectionReclaimer :: "ConnectionPool":Data-ConnectionPool.html#t:ConnectionPool -&gt; Int -&gt; IO ThreadId

This should reclaim a connection after n seconds, but is not yet implemented

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
