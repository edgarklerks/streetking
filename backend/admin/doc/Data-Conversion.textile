* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.Conversion

Synopsis

<ul>
<li>"(.&gt;)":#v:.-62- :: "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; Maybe "InRule":Data-Conversion.html#t:InRule</li>
<li>"(.&gt;&gt;)":#v:.-62--62- :: "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; ["InRule":Data-Conversion.html#t:InRule]</li>
<li>"(==&gt;)":#v:-61--61--62- :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; String -&gt; a -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"(..&gt;)":#v:..-62- :: "FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; Maybe a</li>
<li>"hmapKeys":#v:hmapKeys :: (Eq k, Hashable k) =&gt; (k1 -&gt; k) -&gt; HashMap k1 v -&gt; HashMap k v</li>
<li>"hmapWithKey":#v:hmapWithKey :: (Eq k, Hashable k) =&gt; (k -&gt; v1 -&gt; v) -&gt; HashMap k v1 -&gt; HashMap k v</li>
<li>data "InRule":#t:InRule
<ul>
<li>= "InString":#v:InString !String</li>
<li>&#124; "InByteString":#v:InByteString !ByteString</li>
<li>&#124; "InInteger":#v:InInteger !Integer</li>
<li>&#124; "InDouble":#v:InDouble !Double</li>
<li>&#124; "InNumber":#v:InNumber !Rational</li>
<li>&#124; "InBool":#v:InBool !Bool</li>
<li>&#124; "InNull":#v:InNull</li>
<li>&#124; "InArray":#v:InArray ["InRule":Data-Conversion.html#t:InRule]</li>
<li>&#124; "InObject":#v:InObject (HashMap String "InRule":Data-Conversion.html#t:InRule)</li>
</ul>
</li>
<li>newtype "Readable":#t:Readable = "Readable":#v:Readable {
<ul>
<li>"unReadable":#v:unReadable :: String</li>
</ul>

}</li>
<li>data "InKey":#t:InKey
<ul>
<li>= "Index":#v:Index Int</li>
<li>&#124; "None":#v:None</li>
<li>&#124; "Assoc":#v:Assoc String</li>
</ul>
</li>
<li>newtype "IdentityMonoid":#t:IdentityMonoid a = "IM":#v:IM {
<ul>
<li>"unIM":#v:unIM :: a</li>
</ul>

}</li>
<li>data "PathState":#t:PathState
<ul>
<li>= "Accept":#v:Accept</li>
<li>&#124; "Reject":#v:Reject</li>
</ul>
</li>
<li>data "PathStep":#t:PathStep a
<ul>
<li>= "Next":#v:Next ("PathAcceptor":Data-Conversion.html#t:PathAcceptor a)</li>
<li>&#124; "Final":#v:Final "PathState":Data-Conversion.html#t:PathState</li>
</ul>
</li>
<li>newtype "PathAcceptor":#t:PathAcceptor a = "PM":#v:PM {
<ul>
<li>"unPM":#v:unPM :: a -&gt; "PathStep":Data-Conversion.html#t:PathStep a</li>
</ul>

}</li>
<li>"accept":#v:accept :: "PathStep":Data-Conversion.html#t:PathStep a</li>
<li>"reject":#v:reject :: "PathStep":Data-Conversion.html#t:PathStep a</li>
<li>"acceptor":#v:acceptor :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a</li>
<li>"continue":#v:continue :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a</li>
<li>"alter":#v:alter :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a</li>
<li>"apoint":#v:apoint :: Eq a =&gt; a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a</li>
<li>"runPath":#v:runPath :: Eq a =&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; [a] -&gt; Bool</li>
<li>data "KindView":#t:KindView
<ul>
<li>= "TScalar":#v:TScalar</li>
<li>&#124; "TArray":#v:TArray</li>
<li>&#124; "TObject":#v:TObject</li>
<li>&#124; "TNone":#v:TNone</li>
</ul>
</li>
<li>"viewKind":#v:viewKind :: "InRule":Data-Conversion.html#t:InRule -&gt; "KindView":Data-Conversion.html#t:KindView</li>
<li>"kmap":#v:kmap :: ("InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"pmap":#v:pmap :: (Monoid (f "InKey":Data-Conversion.html#t:InKey), Pointed f) =&gt; (f "InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"pfold":#v:pfold :: (Monoid (f "InKey":Data-Conversion.html#t:InKey), Pointed f) =&gt; (f "InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b</li>
<li>"kfold":#v:kfold :: ("InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b</li>
<li>"readable":#v:readable :: String -&gt; "Readable":Data-Conversion.html#t:Readable</li>
<li>"viaReadable":#v:viaReadable :: Read a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; a</li>
<li>"asReadable":#v:asReadable :: "InRule":Data-Conversion.html#t:InRule -&gt; "Readable":Data-Conversion.html#t:Readable</li>
<li>class "ToInRule":#t:ToInRule a where
<ul>
<li>"toInRule":#v:toInRule :: a -&gt; "InRule":Data-Conversion.html#t:InRule</li>
</ul>
</li>
<li>class "FromInRule":#t:FromInRule a where
<ul>
<li>"fromInRule":#v:fromInRule :: "InRule":Data-Conversion.html#t:InRule -&gt; a</li>
</ul>
</li>
<li>"validObject":#v:validObject :: "InRule":Data-Conversion.html#t:InRule -&gt; Bool</li>
<li>"emptyObj":#v:emptyObj :: "InRule":Data-Conversion.html#t:InRule</li>
<li>"singleObj":#v:singleObj :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; String -&gt; a -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"fromList":#v:fromList :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; [(String, a)] -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"toList":#v:toList :: "FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; [(String, a)]</li>
<li>"toListString":#v:toListString :: "InRule":Data-Conversion.html#t:InRule -&gt; [(String, String)]</li>
<li>"unionObj":#v:unionObj :: "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"unionsObj":#v:unionsObj :: ["InRule":Data-Conversion.html#t:InRule] -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"toString":#v:toString :: "InRule":Data-Conversion.html#t:InRule -&gt; String</li>
<li>"pprint":#v:pprint :: "InRule":Data-Conversion.html#t:InRule -&gt; IO ()</li>
<li>"pprints":#v:pprints :: ["InRule":Data-Conversion.html#t:InRule] -&gt; IO ()</li>
<li>"object":#v:object :: [(String, "InRule":Data-Conversion.html#t:InRule)] -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"list":#v:list :: ["InRule":Data-Conversion.html#t:InRule] -&gt; "InRule":Data-Conversion.html#t:InRule</li>
<li>"project":#v:project :: "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule</li>
</ul>

h1. Documentation

(.&gt;) :: "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; Maybe "InRule":Data-Conversion.html#t:InRule

Find top level matching keyword

(.&gt;&gt;) :: "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; ["InRule":Data-Conversion.html#t:InRule]

Search all occuring keywords recursively

(==&gt;) :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; String -&gt; a -&gt; "InRule":Data-Conversion.html#t:InRule

@(==>@) Eq @singleObj@ .

(..&gt;) :: "FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; String -&gt; Maybe a

Find top level value and convert to normal value

hmapKeys :: (Eq k, Hashable k) =&gt; (k1 -&gt; k) -&gt; HashMap k1 v -&gt; HashMap k v

hmapWithKey :: (Eq k, Hashable k) =&gt; (k -&gt; v1 -&gt; v) -&gt; HashMap k v1 -&gt; HashMap k v

data InRule

Constructors


|InString !String| |
|InByteString !ByteString| |
|InInteger !Integer| |
|InDouble !Double| |
|InNumber !Rational| |
|InBool !Bool| |
|InNull| |
|InArray ["InRule":Data-Conversion.html#t:InRule]| |
|InObject (HashMap String "InRule":Data-Conversion.html#t:InRule)| |


Instances


|Eq "InRule":Data-Conversion.html#t:InRule| |
|Show "InRule":Data-Conversion.html#t:InRule| |
|IsString "InRule":Data-Conversion.html#t:InRule| |
|Arbitrary "InRule":Data-Conversion.html#t:InRule| |
|Serialize "InRule":Data-Conversion.html#t:InRule| |
|"FromInRule":Data-Conversion.html#t:FromInRule "InRule":Data-Conversion.html#t:InRule| |
|"ToInRule":Data-Conversion.html#t:ToInRule "InRule":Data-Conversion.html#t:InRule| |
|"StringLike":Data-Tools.html#t:StringLike "InRule":Data-Conversion.html#t:InRule| |
|Binary "InRule":Data-Conversion.html#t:InRule| |
|"ToInRule":Data-Conversion.html#t:ToInRule b =&gt; Convertible b "InRule":Data-Conversion.html#t:InRule| |
|"FromInRule":Data-Conversion.html#t:FromInRule b =&gt; Convertible "InRule":Data-Conversion.html#t:InRule b| |


newtype Readable

Constructors

Readable

 

Fields

<dl>
<dt>unReadable :: String</dt>
<dd> </dd>
</dl>

Instances


|Show "Readable":Data-Conversion.html#t:Readable| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Readable":Data-Conversion.html#t:Readable| |
|Read a =&gt; Convertible "Readable":Data-Conversion.html#t:Readable a| |


data InKey

Setters, getters, folds, unfolds and maps.

Constructors


|Index Int| |
|None| |
|Assoc String| |


Instances


|Show "InKey":Data-Conversion.html#t:InKey| |
|Monoid "InKey":Data-Conversion.html#t:InKey| |


newtype IdentityMonoid a

Constructors

IM

 

Fields

<dl>
<dt>unIM :: a</dt>
<dd> </dd>
</dl>

Instances


|Functor "IdentityMonoid":Data-Conversion.html#t:IdentityMonoid| |
|Pointed "IdentityMonoid":Data-Conversion.html#t:IdentityMonoid| |
|Copointed "IdentityMonoid":Data-Conversion.html#t:IdentityMonoid| |
|Monoid a =&gt; Monoid ("IdentityMonoid":Data-Conversion.html#t:IdentityMonoid a)| |


data PathState

Simple automaton for rejecting or accepting paths

Constructors


|Accept| |
|Reject| |


Instances


|Show "PathState":Data-Conversion.html#t:PathState| |


data PathStep a

Constructors


|Next ("PathAcceptor":Data-Conversion.html#t:PathAcceptor a)| |
|Final "PathState":Data-Conversion.html#t:PathState| |


newtype PathAcceptor a

Constructors

PM

 

Fields

<dl>
<dt>unPM :: a -&gt; "PathStep":Data-Conversion.html#t:PathStep a</dt>
<dd> </dd>
</dl>

Instances


|Semigroup ("PathAcceptor":Data-Conversion.html#t:PathAcceptor a)| |


accept :: "PathStep":Data-Conversion.html#t:PathStep a

reject :: "PathStep":Data-Conversion.html#t:PathStep a

acceptor :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a

Always accept the input

continue :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a

Always accept the complete input stream (will always be false for finite streams and true for infinite ones)

alter :: "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a

apoint :: Eq a =&gt; a -&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a

runPath :: Eq a =&gt; "PathAcceptor":Data-Conversion.html#t:PathAcceptor a -&gt; [a] -&gt; Bool

data KindView

Constructors


|TScalar| |
|TArray| |
|TObject| |
|TNone| |


Instances


|Eq "KindView":Data-Conversion.html#t:KindView| |
|Show "KindView":Data-Conversion.html#t:KindView| |


viewKind :: "InRule":Data-Conversion.html#t:InRule -&gt; "KindView":Data-Conversion.html#t:KindView

kmap :: ("InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule

Maps through the structure

pmap :: (Monoid (f "InKey":Data-Conversion.html#t:InKey), Pointed f) =&gt; (f "InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule

Maps trough the structure with a history of the path kept in a monoid

pfold :: (Monoid (f "InKey":Data-Conversion.html#t:InKey), Pointed f) =&gt; (f "InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b

Fold trough a structure with a history of the path kept in a monoid

kfold :: ("InKey":Data-Conversion.html#t:InKey -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b) -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; b -&gt; b

Fold through the structure

readable :: String -&gt; "Readable":Data-Conversion.html#t:Readable

viaReadable :: Read a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; a

asReadable :: "InRule":Data-Conversion.html#t:InRule -&gt; "Readable":Data-Conversion.html#t:Readable

class ToInRule a where

Methods

toInRule :: a -&gt; "InRule":Data-Conversion.html#t:InRule

Instances

"ToInRule":Data-Conversion.html#t:ToInRule Bool

 

"ToInRule":Data-Conversion.html#t:ToInRule Char

 

"ToInRule":Data-Conversion.html#t:ToInRule Double

 

"ToInRule":Data-Conversion.html#t:ToInRule Float

 

"ToInRule":Data-Conversion.html#t:ToInRule Int

 

"ToInRule":Data-Conversion.html#t:ToInRule Int32

 

"ToInRule":Data-Conversion.html#t:ToInRule Int64

 

"ToInRule":Data-Conversion.html#t:ToInRule Integer

 

"ToInRule":Data-Conversion.html#t:ToInRule Rational

 

"ToInRule":Data-Conversion.html#t:ToInRule Word32

 

"ToInRule":Data-Conversion.html#t:ToInRule Word64

 

"ToInRule":Data-Conversion.html#t:ToInRule String

 

"ToInRule":Data-Conversion.html#t:ToInRule ()

 

"ToInRule":Data-Conversion.html#t:ToInRule ByteString

 

"ToInRule":Data-Conversion.html#t:ToInRule Value

 

"ToInRule":Data-Conversion.html#t:ToInRule ByteString

 

"ToInRule":Data-Conversion.html#t:ToInRule UTCTime

 

"ToInRule":Data-Conversion.html#t:ToInRule Day

 

"ToInRule":Data-Conversion.html#t:ToInRule TimeOfDay

 

"ToInRule":Data-Conversion.html#t:ToInRule LocalTime

 

"ToInRule":Data-Conversion.html#t:ToInRule "SqlValue":Data-SqlTransaction.html#t:SqlValue

Renders InRule to String.

"ToInRule":Data-Conversion.html#t:ToInRule "InRule":Data-Conversion.html#t:InRule

 

"ToInRule":Data-Conversion.html#t:ToInRule "Event":Data-Event.html#t:Event

 

"ToInRule":Data-Conversion.html#t:ToInRule "Data":Data-DataPack.html#t:Data

 

"ToInRule":Data-Conversion.html#t:ToInRule "PartDetails":Model-PartDetails.html#t:PartDetails

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceRewards":Data-RaceReward.html#t:RaceRewards

 

"ToInRule":Data-Conversion.html#t:ToInRule "Tournament":Model-Tournament.html#t:Tournament

 

"ToInRule":Data-Conversion.html#t:ToInRule "TournamentType":Model-TournamentType.html#t:TournamentType

 

"ToInRule":Data-Conversion.html#t:ToInRule "EventStream":Model-EventStream.html#t:EventStream

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceReward":Model-RaceReward.html#t:RaceReward

 

"ToInRule":Data-Conversion.html#t:ToInRule "Type":Model-Report.html#t:Type

 

"ToInRule":Data-Conversion.html#t:ToInRule "Report":Model-Report.html#t:Report

 

"ToInRule":Data-Conversion.html#t:ToInRule "Task":Model-Task.html#t:Task

 

"ToInRule":Data-Conversion.html#t:ToInRule "TrackDetails":Model-TrackDetails.html#t:TrackDetails

 

"ToInRule":Data-Conversion.html#t:ToInRule "TrackMaster":Model-TrackMaster.html#t:TrackMaster

 

"ToInRule":Data-Conversion.html#t:ToInRule "PreLetter":Model-PreLetter.html#t:PreLetter

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceSectionPerformance":Data-RaceSectionPerformance.html#t:RaceSectionPerformance

 

"ToInRule":Data-Conversion.html#t:ToInRule "AccountProfile":Model-AccountProfile.html#t:AccountProfile

 

"ToInRule":Data-Conversion.html#t:ToInRule "TaskTrigger":Model-TaskTrigger.html#t:TaskTrigger

 

"ToInRule":Data-Conversion.html#t:ToInRule "MenuModel":Model-MenuModel.html#t:MenuModel

 

"ToInRule":Data-Conversion.html#t:ToInRule "Reward":Model-Reward.html#t:Reward

 

"ToInRule":Data-Conversion.html#t:ToInRule "RuleReward":Model-RuleReward.html#t:RuleReward

 

"ToInRule":Data-Conversion.html#t:ToInRule "Action":Model-Action.html#t:Action

 

"ToInRule":Data-Conversion.html#t:ToInRule "Rule":Model-Rule.html#t:Rule

 

"ToInRule":Data-Conversion.html#t:ToInRule "RewardLog":Model-RewardLog.html#t:RewardLog

 

"ToInRule":Data-Conversion.html#t:ToInRule "PartType":Model-PartType.html#t:PartType

 

"ToInRule":Data-Conversion.html#t:ToInRule "Part":Model-Part.html#t:Part

 

"ToInRule":Data-Conversion.html#t:ToInRule "AccountGarage":Model-AccountGarage.html#t:AccountGarage

 

"ToInRule":Data-Conversion.html#t:ToInRule "PartMarket":Model-PartMarket.html#t:PartMarket

 

"ToInRule":Data-Conversion.html#t:ToInRule "ParameterTable":Model-ParameterTable.html#t:ParameterTable

 

"ToInRule":Data-Conversion.html#t:ToInRule "PersonnelInstance":Model-PersonnelInstance.html#t:PersonnelInstance

 

"ToInRule":Data-Conversion.html#t:ToInRule "Personnel":Model-Personnel.html#t:Personnel

 

"ToInRule":Data-Conversion.html#t:ToInRule "Notification":Model-Notification.html#t:Notification

 

"ToInRule":Data-Conversion.html#t:ToInRule "GaragePart":Model-GarageParts.html#t:GaragePart

 

"ToInRule":Data-Conversion.html#t:ToInRule "Garage":Model-Garage.html#t:Garage

 

"ToInRule":Data-Conversion.html#t:ToInRule "Config":Model-Config.html#t:Config

 

"ToInRule":Data-Conversion.html#t:ToInRule "Continent":Model-Continent.html#t:Continent

 

"ToInRule":Data-Conversion.html#t:ToInRule "Country":Model-Country.html#t:Country

 

"ToInRule":Data-Conversion.html#t:ToInRule "City":Model-City.html#t:City

 

"ToInRule":Data-Conversion.html#t:ToInRule "Track":Model-Track.html#t:Track

 

"ToInRule":Data-Conversion.html#t:ToInRule "ChallengeType":Model-ChallengeType.html#t:ChallengeType

 

"ToInRule":Data-Conversion.html#t:ToInRule "ChallengeAccept":Model-ChallengeAccept.html#t:ChallengeAccept

 

"ToInRule":Data-Conversion.html#t:ToInRule "Application":Model-Application.html#t:Application

 

"ToInRule":Data-Conversion.html#t:ToInRule "CarInstanceParts":Model-CarInstanceParts.html#t:CarInstanceParts

 

"ToInRule":Data-Conversion.html#t:ToInRule "PartInstance":Model-PartInstance.html#t:PartInstance

 

"ToInRule":Data-Conversion.html#t:ToInRule "PartModifier":Model-PartModifier.html#t:PartModifier

 

"ToInRule":Data-Conversion.html#t:ToInRule "Account":Model-Account.html#t:Account

 

"ToInRule":Data-Conversion.html#t:ToInRule "Transaction":Model-Transaction.html#t:Transaction

 

"ToInRule":Data-Conversion.html#t:ToInRule "Escrow":Model-Escrow.html#t:Escrow

 

"ToInRule":Data-Conversion.html#t:ToInRule Box

 

"ToInRule":Data-Conversion.html#t:ToInRule ComposeMap

 

"ToInRule":Data-Conversion.html#t:ToInRule "NotificationParam":Notifications.html#t:NotificationParam

 

"ToInRule":Data-Conversion.html#t:ToInRule RaceType

 

"ToInRule":Data-Conversion.html#t:ToInRule "AccountProfileMin":Model-AccountProfileMin.html#t:AccountProfileMin

 

"ToInRule":Data-Conversion.html#t:ToInRule "CarOptions":Model-CarOptions.html#t:CarOptions

 

"ToInRule":Data-Conversion.html#t:ToInRule "CarInGarage":Model-CarInGarage.html#t:CarInGarage

 

"ToInRule":Data-Conversion.html#t:ToInRule "CarMinimal":Model-CarMinimal.html#t:CarMinimal

 

"ToInRule":Data-Conversion.html#t:ToInRule "TrackTime":Model-TrackTime.html#t:TrackTime

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceParticipant":Data-RaceParticipant.html#t:RaceParticipant

 

"ToInRule":Data-Conversion.html#t:ToInRule "Challenge":Model-Challenge.html#t:Challenge

 

"ToInRule":Data-Conversion.html#t:ToInRule SectionResult

 

"ToInRule":Data-Conversion.html#t:ToInRule RaceResult

 

"ToInRule":Data-Conversion.html#t:ToInRule RaceParticipant

 

"ToInRule":Data-Conversion.html#t:ToInRule RaceRewards

 

"ToInRule":Data-Conversion.html#t:ToInRule RaceData

 

"ToInRule":Data-Conversion.html#t:ToInRule "TournamentPlayer":Model-TournamentPlayers.html#t:TournamentPlayer

 

"ToInRule":Data-Conversion.html#t:ToInRule "CarInstance":Model-CarInstance.html#t:CarInstance

 

"ToInRule":Data-Conversion.html#t:ToInRule "SectionResult":Data-RacingNew.html#t:SectionResult

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceResult":Data-RacingNew.html#t:RaceResult

 

"ToInRule":Data-Conversion.html#t:ToInRule "RaceData":Data-RacingNew.html#t:RaceData

 

"ToInRule":Data-Conversion.html#t:ToInRule "Race":Model-Race.html#t:Race

 

"ToInRule":Data-Conversion.html#t:ToInRule "TournamentResult":Model-TournamentResult.html#t:TournamentResult

 

"ToInRule":Data-Conversion.html#t:ToInRule "TournamentReport":Model-TournamentReport.html#t:TournamentReport

 

"ToInRule":Data-Conversion.html#t:ToInRule RoundResult

 

"ToInRule":Data-Conversion.html#t:ToInRule TournamentFullData

 

"ToInRule":Data-Conversion.html#t:ToInRule "Car":Model-Car.html#t:Car

 

"ToInRule":Data-Conversion.html#t:ToInRule a =&gt; "ToInRule":Data-Conversion.html#t:ToInRule [a]

 

"ToInRule":Data-Conversion.html#t:ToInRule a =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (Maybe a)

 

("ToInRule":Data-Conversion.html#t:ToInRule t1, "ToInRule":Data-Conversion.html#t:ToInRule t2) =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (t1, t2)

 

"ToInRule":Data-Conversion.html#t:ToInRule a =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (HashMap String a)

 

("ToInRule":Data-Conversion.html#t:ToInRule k, "ToInRule":Data-Conversion.html#t:ToInRule v) =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (HashMap k v)

 

("ToInRule":Data-Conversion.html#t:ToInRule t1, "ToInRule":Data-Conversion.html#t:ToInRule t2, "ToInRule":Data-Conversion.html#t:ToInRule t3) =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (t1, t2, t3)

 

("ToInRule":Data-Conversion.html#t:ToInRule t1, "ToInRule":Data-Conversion.html#t:ToInRule t2, "ToInRule":Data-Conversion.html#t:ToInRule t3, "ToInRule":Data-Conversion.html#t:ToInRule t4) =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (t1, t2, t3, t4)

 

("ToInRule":Data-Conversion.html#t:ToInRule t1, "ToInRule":Data-Conversion.html#t:ToInRule t2, "ToInRule":Data-Conversion.html#t:ToInRule t3, "ToInRule":Data-Conversion.html#t:ToInRule t4, "ToInRule":Data-Conversion.html#t:ToInRule t5) =&gt; "ToInRule":Data-Conversion.html#t:ToInRule (t1, t2, t3, t4, t5)

 

class FromInRule a where

Methods

fromInRule :: "InRule":Data-Conversion.html#t:InRule -&gt; a

Instances


|"FromInRule":Data-Conversion.html#t:FromInRule Bool| |
|"FromInRule":Data-Conversion.html#t:FromInRule Double| |
|"FromInRule":Data-Conversion.html#t:FromInRule Float| |
|"FromInRule":Data-Conversion.html#t:FromInRule Int| |
|"FromInRule":Data-Conversion.html#t:FromInRule Int32| |
|"FromInRule":Data-Conversion.html#t:FromInRule Int64| |
|"FromInRule":Data-Conversion.html#t:FromInRule Integer| |
|"FromInRule":Data-Conversion.html#t:FromInRule Rational| |
|"FromInRule":Data-Conversion.html#t:FromInRule Word32| |
|"FromInRule":Data-Conversion.html#t:FromInRule Word64| |
|"FromInRule":Data-Conversion.html#t:FromInRule String| |
|"FromInRule":Data-Conversion.html#t:FromInRule ByteString| |
|"FromInRule":Data-Conversion.html#t:FromInRule Value| |
|"FromInRule":Data-Conversion.html#t:FromInRule ByteString| |
|"FromInRule":Data-Conversion.html#t:FromInRule UTCTime| |
|"FromInRule":Data-Conversion.html#t:FromInRule Day| |
|"FromInRule":Data-Conversion.html#t:FromInRule TimeOfDay| |
|"FromInRule":Data-Conversion.html#t:FromInRule LocalTime| |
|"FromInRule":Data-Conversion.html#t:FromInRule "SqlValue":Data-SqlTransaction.html#t:SqlValue| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Readable":Data-Conversion.html#t:Readable| |
|"FromInRule":Data-Conversion.html#t:FromInRule "InRule":Data-Conversion.html#t:InRule| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Event":Data-Event.html#t:Event| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Data":Data-DataPack.html#t:Data| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PartDetails":Model-PartDetails.html#t:PartDetails| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceRewards":Data-RaceReward.html#t:RaceRewards| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Tournament":Model-Tournament.html#t:Tournament| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TournamentType":Model-TournamentType.html#t:TournamentType| |
|"FromInRule":Data-Conversion.html#t:FromInRule "EventStream":Model-EventStream.html#t:EventStream| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceReward":Model-RaceReward.html#t:RaceReward| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Type":Model-Report.html#t:Type| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Report":Model-Report.html#t:Report| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Task":Model-Task.html#t:Task| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TrackDetails":Model-TrackDetails.html#t:TrackDetails| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TrackMaster":Model-TrackMaster.html#t:TrackMaster| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PreLetter":Model-PreLetter.html#t:PreLetter| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceSectionPerformance":Data-RaceSectionPerformance.html#t:RaceSectionPerformance| |
|"FromInRule":Data-Conversion.html#t:FromInRule "AccountProfile":Model-AccountProfile.html#t:AccountProfile| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TaskTrigger":Model-TaskTrigger.html#t:TaskTrigger| |
|"FromInRule":Data-Conversion.html#t:FromInRule "MenuModel":Model-MenuModel.html#t:MenuModel| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Reward":Model-Reward.html#t:Reward| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RuleReward":Model-RuleReward.html#t:RuleReward| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Action":Model-Action.html#t:Action| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Rule":Model-Rule.html#t:Rule| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RewardLog":Model-RewardLog.html#t:RewardLog| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PartType":Model-PartType.html#t:PartType| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Part":Model-Part.html#t:Part| |
|"FromInRule":Data-Conversion.html#t:FromInRule "AccountGarage":Model-AccountGarage.html#t:AccountGarage| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PartMarket":Model-PartMarket.html#t:PartMarket| |
|"FromInRule":Data-Conversion.html#t:FromInRule "ParameterTable":Model-ParameterTable.html#t:ParameterTable| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PersonnelInstance":Model-PersonnelInstance.html#t:PersonnelInstance| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Personnel":Model-Personnel.html#t:Personnel| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Notification":Model-Notification.html#t:Notification| |
|"FromInRule":Data-Conversion.html#t:FromInRule "GaragePart":Model-GarageParts.html#t:GaragePart| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Garage":Model-Garage.html#t:Garage| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Config":Model-Config.html#t:Config| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Continent":Model-Continent.html#t:Continent| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Country":Model-Country.html#t:Country| |
|"FromInRule":Data-Conversion.html#t:FromInRule "City":Model-City.html#t:City| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Track":Model-Track.html#t:Track| |
|"FromInRule":Data-Conversion.html#t:FromInRule "ChallengeType":Model-ChallengeType.html#t:ChallengeType| |
|"FromInRule":Data-Conversion.html#t:FromInRule "ChallengeAccept":Model-ChallengeAccept.html#t:ChallengeAccept| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Application":Model-Application.html#t:Application| |
|"FromInRule":Data-Conversion.html#t:FromInRule "CarInstanceParts":Model-CarInstanceParts.html#t:CarInstanceParts| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PartInstance":Model-PartInstance.html#t:PartInstance| |
|"FromInRule":Data-Conversion.html#t:FromInRule "PartModifier":Model-PartModifier.html#t:PartModifier| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Account":Model-Account.html#t:Account| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Transaction":Model-Transaction.html#t:Transaction| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Escrow":Model-Escrow.html#t:Escrow| |
|"FromInRule":Data-Conversion.html#t:FromInRule "AccountProfileMin":Model-AccountProfileMin.html#t:AccountProfileMin| |
|"FromInRule":Data-Conversion.html#t:FromInRule "CarOptions":Model-CarOptions.html#t:CarOptions| |
|"FromInRule":Data-Conversion.html#t:FromInRule "CarInGarage":Model-CarInGarage.html#t:CarInGarage| |
|"FromInRule":Data-Conversion.html#t:FromInRule "CarMinimal":Model-CarMinimal.html#t:CarMinimal| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TrackTime":Model-TrackTime.html#t:TrackTime| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceParticipant":Data-RaceParticipant.html#t:RaceParticipant| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Challenge":Model-Challenge.html#t:Challenge| |
|"FromInRule":Data-Conversion.html#t:FromInRule SectionResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule RaceResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule RaceParticipant| |
|"FromInRule":Data-Conversion.html#t:FromInRule RaceRewards| |
|"FromInRule":Data-Conversion.html#t:FromInRule RaceData| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TournamentPlayer":Model-TournamentPlayers.html#t:TournamentPlayer| |
|"FromInRule":Data-Conversion.html#t:FromInRule "CarInstance":Model-CarInstance.html#t:CarInstance| |
|"FromInRule":Data-Conversion.html#t:FromInRule "SectionResult":Data-RacingNew.html#t:SectionResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceResult":Data-RacingNew.html#t:RaceResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule "RaceData":Data-RacingNew.html#t:RaceData| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Race":Model-Race.html#t:Race| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TournamentResult":Model-TournamentResult.html#t:TournamentResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule "TournamentReport":Model-TournamentReport.html#t:TournamentReport| |
|"FromInRule":Data-Conversion.html#t:FromInRule RoundResult| |
|"FromInRule":Data-Conversion.html#t:FromInRule TournamentFullData| |
|"FromInRule":Data-Conversion.html#t:FromInRule "Car":Model-Car.html#t:Car| |
|"FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "FromInRule":Data-Conversion.html#t:FromInRule [a]| |
|"FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (Maybe a)| |
|("FromInRule":Data-Conversion.html#t:FromInRule t1, "FromInRule":Data-Conversion.html#t:FromInRule t2) =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (t1, t2)| |
|"FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (HashMap String a)| |
|(Eq k, Hashable k, "FromInRule":Data-Conversion.html#t:FromInRule k, "FromInRule":Data-Conversion.html#t:FromInRule v) =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (HashMap k v)| |
|("FromInRule":Data-Conversion.html#t:FromInRule t1, "FromInRule":Data-Conversion.html#t:FromInRule t2, "FromInRule":Data-Conversion.html#t:FromInRule t3) =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (t1, t2, t3)| |
|("FromInRule":Data-Conversion.html#t:FromInRule t1, "FromInRule":Data-Conversion.html#t:FromInRule t2, "FromInRule":Data-Conversion.html#t:FromInRule t3, "FromInRule":Data-Conversion.html#t:FromInRule t4) =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (t1, t2, t3, t4)| |
|("FromInRule":Data-Conversion.html#t:FromInRule t1, "FromInRule":Data-Conversion.html#t:FromInRule t2, "FromInRule":Data-Conversion.html#t:FromInRule t3, "FromInRule":Data-Conversion.html#t:FromInRule t4, "FromInRule":Data-Conversion.html#t:FromInRule t5) =&gt; "FromInRule":Data-Conversion.html#t:FromInRule (t1, t2, t3, t4, t5)| |


validObject :: "InRule":Data-Conversion.html#t:InRule -&gt; Bool

emptyObj :: "InRule":Data-Conversion.html#t:InRule

singleObj :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; String -&gt; a -&gt; "InRule":Data-Conversion.html#t:InRule

Create single InRule object.

fromList :: "ToInRule":Data-Conversion.html#t:ToInRule a =&gt; [(String, a)] -&gt; "InRule":Data-Conversion.html#t:InRule

Create InRule object from list.

toList :: "FromInRule":Data-Conversion.html#t:FromInRule a =&gt; "InRule":Data-Conversion.html#t:InRule -&gt; [(String, a)]

Create InRule object from list.

toListString :: "InRule":Data-Conversion.html#t:InRule -&gt; [(String, String)]

unionObj :: "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule

unionsObj :: ["InRule":Data-Conversion.html#t:InRule] -&gt; "InRule":Data-Conversion.html#t:InRule

Merge InRule objects from list.

toString :: "InRule":Data-Conversion.html#t:InRule -&gt; String

Renders InRule to String.

pprint :: "InRule":Data-Conversion.html#t:InRule -&gt; IO ()

Pretty-prints InRule.

pprints :: ["InRule":Data-Conversion.html#t:InRule] -&gt; IO ()

Pretty-prints InRules.

object :: [(String, "InRule":Data-Conversion.html#t:InRule)] -&gt; "InRule":Data-Conversion.html#t:InRule

list :: ["InRule":Data-Conversion.html#t:InRule] -&gt; "InRule":Data-Conversion.html#t:InRule

project :: "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule -&gt; "InRule":Data-Conversion.html#t:InRule

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
