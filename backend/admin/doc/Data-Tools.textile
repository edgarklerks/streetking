* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Data.Tools

Synopsis

<ul>
<li>data "CheckException":#t:CheckException
<ul>
<li>= "CE":#v:CE [(String, [String])]</li>
<li>&#124; "CF":#v:CF String</li>
</ul>
</li>
<li>newtype "CFilter":#t:CFilter v = "CFilter":#v:CFilter {
<ul>
<li>"runCFilter":#v:runCFilter :: v -&gt; Maybe [String]</li>
</ul>

}</li>
<li>"mkCFilter":#v:mkCFilter :: (v -&gt; Bool) -&gt; String -&gt; "CFilter":Data-Tools.html#t:CFilter v</li>
<li>"cfmap":#v:cfmap :: (v' -&gt; v) -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v'</li>
<li>"must":#v:must :: (MonadCatchIO m, Eq k) =&gt; [(k, v)] -&gt; [k] -&gt; m ()</li>
<li>"cfilter":#v:cfilter :: ("StringLike":Data-Tools.html#t:StringLike v, Eq k, "StringLike":Data-Tools.html#t:StringLike k, MonadCatchIO m) =&gt; [(k, v)] -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; m ()</li>
<li>"scfilter":#v:scfilter :: (Show k, Show v, "StringLike":Data-Tools.html#t:StringLike v, Eq k, "StringLike":Data-Tools.html#t:StringLike k, MonadCatchIO m) =&gt; HashMap k v -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; m ()</li>
<li>"andcf":#v:andcf :: "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v</li>
<li>"orcf":#v:orcf :: "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v</li>
<li>"cfilterPure":#v:cfilterPure :: Eq k =&gt; [(k, v)] -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; [(k, [String])]</li>
<li>class IsString s =&gt; "StringLike":#t:StringLike s where
<ul>
<li>"toString":#v:toString :: s -&gt; String</li>
<li>"readS":#v:readS :: Read a =&gt; s -&gt; Maybe a</li>
</ul>
</li>
<li>"mkCRegex":#v:mkCRegex :: "StringLike":Data-Tools.html#t:StringLike s =&gt; String -&gt; String -&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"minl":#v:minl :: "StringLike":Data-Tools.html#t:StringLike s =&gt; Int -&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"maxl":#v:maxl :: "StringLike":Data-Tools.html#t:StringLike s =&gt; Int -&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"email":#v:email :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"isNumber":#v:isNumber :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"natural":#v:natural :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"between":#v:between :: "StringLike":Data-Tools.html#t:StringLike s =&gt; (Double, Double) -&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"longitude":#v:longitude :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"latitude":#v:latitude :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s</li>
<li>"strength":#v:strength :: Functor m =&gt; (a, m b) -&gt; m (a, b)</li>
<li>"zipKeyWith":#v:zipKeyWith :: Eq k =&gt; (k -&gt; a -&gt; b -&gt; c) -&gt; [(k, a)] -&gt; [(k, b)] -&gt; [c]</li>
<li>"whenM":#v:whenM :: Monad m =&gt; m Bool -&gt; m a -&gt; m ()</li>
<li>"encWith":#v:encWith :: a -&gt; [a] -&gt; [a]</li>
<li>"enclose":#v:enclose :: [a] -&gt; [a] -&gt; [a]</li>
<li>"join":#v:join :: [a] -&gt; [[a]] -&gt; [a]</li>
<li>"alternate":#v:alternate :: [a] -&gt; [a] -&gt; [a]</li>
<li>"lfilter":#v:lfilter :: Eq k =&gt; [k] -&gt; [(k, v)] -&gt; [(k, v)]</li>
<li>"lnub":#v:lnub :: Eq k =&gt; [(k, v)] -&gt; [(k, v)]</li>
<li>"ladd":#v:ladd :: Eq k =&gt; [(k, v)] -&gt; [(k, v)] -&gt; [(k, v)]</li>
<li>"sallowed":#v:sallowed :: (Hashable k, Eq k) =&gt; [k] -&gt; HashMap k v -&gt; HashMap k v</li>
<li>"smust":#v:smust :: (Show k, MonadCatchIO m, Eq k) =&gt; [k] -&gt; HashMap k v -&gt; m ()</li>
<li>"scheck":#v:scheck :: (Show k, Hashable k, Eq k, MonadCatchIO m) =&gt; [k] -&gt; HashMap k v -&gt; m (HashMap k v)</li>
<li>"assert":#v:assert :: (Error e, MonadError e m) =&gt; Bool -&gt; String -&gt; m ()</li>
<li>"randomPick":#v:randomPick :: [a] -&gt; IO a</li>
<li>"randomPick'":#v:randomPick-39- :: [a] -&gt; IO (a, [a])</li>
<li>"showTable":#v:showTable :: Show a =&gt; [[a]] -&gt; String</li>
<li>"showTable'":#v:showTable-39- :: [[String]] -&gt; String</li>
<li>"showTableWithHeader":#v:showTableWithHeader :: (Show a, Show b) =&gt; [a] -&gt; [[b]] -&gt; String</li>
<li>"showTableWithHeader'":#v:showTableWithHeader-39- :: [String] -&gt; [[String]] -&gt; String</li>
<li>"renderTable":#v:renderTable :: [[Box]] -&gt; String</li>
</ul>

h1. Documentation

data CheckException

CheckException signals a problem with user data verification

Constructors


|CE [(String, [String])]| |
|CF String| |


Instances


|Show "CheckException":Data-Tools.html#t:CheckException| |
|Typeable "CheckException":Data-Tools.html#t:CheckException| |
|Exception "CheckException":Data-Tools.html#t:CheckException| |


newtype CFilter v

A CFilter is a composable (by monoidic) user data verifier.

Constructors

CFilter

 

Fields

<dl>
<dt>runCFilter :: v -&gt; Maybe [String]</dt>
<dd> </dd>
</dl>

Instances

Monoid ("CFilter":Data-Tools.html#t:CFilter v)

Monoid instance for CFilter, to allow composable filters. &#124; mappend is andcf, both filters must pass

mkCFilter :: (v -&gt; Bool) -&gt; String -&gt; "CFilter":Data-Tools.html#t:CFilter v

Create a new filter with a error message

cfmap :: (v' -&gt; v) -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v'

Map the input type of the CFilter

must :: (MonadCatchIO m, Eq k) =&gt; [(k, v)] -&gt; [k] -&gt; m ()

A list must have certain keys

cfilter :: ("StringLike":Data-Tools.html#t:StringLike v, Eq k, "StringLike":Data-Tools.html#t:StringLike k, MonadCatchIO m) =&gt; [(k, v)] -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; m ()

Non pure version of cfilterPure, throws CheckException

scfilter :: (Show k, Show v, "StringLike":Data-Tools.html#t:StringLike v, Eq k, "StringLike":Data-Tools.html#t:StringLike k, MonadCatchIO m) =&gt; HashMap k v -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; m ()

andcf :: "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v

andcf composes two CFilters. Both should pass

orcf :: "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v -&gt; "CFilter":Data-Tools.html#t:CFilter v

orcf composes two CFilters. At least one should pass

cfilterPure :: Eq k =&gt; [(k, v)] -&gt; [(k, "CFilter":Data-Tools.html#t:CFilter v)] -&gt; [(k, [String])]

Evaluate a list to a list of key-error string pairs specified by the provided CFilters

class IsString s =&gt; StringLike s where

Many types are isomorph to Strings

Methods

toString :: s -&gt; String

readS :: Read a =&gt; s -&gt; Maybe a

Instances


|"StringLike":Data-Tools.html#t:StringLike String| |
|"StringLike":Data-Tools.html#t:StringLike ByteString| |
|"StringLike":Data-Tools.html#t:StringLike Text| |
|"StringLike":Data-Tools.html#t:StringLike ByteString| |
|"StringLike":Data-Tools.html#t:StringLike "SqlValue":Data-SqlTransaction.html#t:SqlValue| |
|"StringLike":Data-Tools.html#t:StringLike "InRule":Data-InRules.html#t:InRule| |


mkCRegex :: "StringLike":Data-Tools.html#t:StringLike s =&gt; String -&gt; String -&gt; "CFilter":Data-Tools.html#t:CFilter s

Create a CFilter from a regex. First is the regex. Second is the error message.

minl :: "StringLike":Data-Tools.html#t:StringLike s =&gt; Int -&gt; "CFilter":Data-Tools.html#t:CFilter s

An empty CFilter

maxl :: "StringLike":Data-Tools.html#t:StringLike s =&gt; Int -&gt; "CFilter":Data-Tools.html#t:CFilter s

An empty CFilter

email :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s

An email CFilter

isNumber :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s

A number format CFilter (Double)

natural :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s

A integer format CFilter (i &gt; 0)

between :: "StringLike":Data-Tools.html#t:StringLike s =&gt; (Double, Double) -&gt; "CFilter":Data-Tools.html#t:CFilter s

A number format CFilter. Test if value is between the borders.

longitude :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s

Check if the number is a valid longitude (-180, 180)

latitude :: "StringLike":Data-Tools.html#t:StringLike s =&gt; "CFilter":Data-Tools.html#t:CFilter s

Check if the number is a valid latitude (-90,90)

strength :: Functor m =&gt; (a, m b) -&gt; m (a, b)

Haskell functors are strong functors. &#124; Strong functors have the following property:

zipKeyWith :: Eq k =&gt; (k -&gt; a -&gt; b -&gt; c) -&gt; [(k, a)] -&gt; [(k, b)] -&gt; [c]

ZipKeyWith zips two key-value lists together with a helper function if the keys matches

whenM :: Monad m =&gt; m Bool -&gt; m a -&gt; m ()

encWith :: a -&gt; [a] -&gt; [a]

enclose :: [a] -&gt; [a] -&gt; [a]

join :: [a] -&gt; [[a]] -&gt; [a]

alternate :: [a] -&gt; [a] -&gt; [a]

lfilter :: Eq k =&gt; [k] -&gt; [(k, v)] -&gt; [(k, v)]

lnub :: Eq k =&gt; [(k, v)] -&gt; [(k, v)]

ladd :: Eq k =&gt; [(k, v)] -&gt; [(k, v)] -&gt; [(k, v)]

sallowed :: (Hashable k, Eq k) =&gt; [k] -&gt; HashMap k v -&gt; HashMap k v

smust :: (Show k, MonadCatchIO m, Eq k) =&gt; [k] -&gt; HashMap k v -&gt; m ()

scheck :: (Show k, Hashable k, Eq k, MonadCatchIO m) =&gt; [k] -&gt; HashMap k v -&gt; m (HashMap k v)

assert :: (Error e, MonadError e m) =&gt; Bool -&gt; String -&gt; m ()

randomPick :: [a] -&gt; IO a

randomPick' :: [a] -&gt; IO (a, [a])

showTable :: Show a =&gt; [[a]] -&gt; String

showTable' :: [[String]] -&gt; String

showTableWithHeader :: (Show a, Show b) =&gt; [a] -&gt; [[b]] -&gt; String

showTableWithHeader' :: [String] -&gt; [[String]] -&gt; String

renderTable :: [[Box]] -&gt; String

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
