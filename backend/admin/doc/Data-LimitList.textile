* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

Safe-Infered

Data.LimitList

h1. Documentation

data LimitList a

Constructors


|LL !Int !Int (Seq a)| |


Instances


|Functor "LimitList":Data-LimitList.html#t:LimitList| |
|Foldable "LimitList":Data-LimitList.html#t:LimitList| |
|Traversable "LimitList":Data-LimitList.html#t:LimitList| |
|Show a =&gt; Show ("LimitList":Data-LimitList.html#t:LimitList a)| |
|Monoid ("LimitList":Data-LimitList.html#t:LimitList a)| |


new :: Int -&gt; "LimitList":Data-LimitList.html#t:LimitList a

size :: "LimitList":Data-LimitList.html#t:LimitList a -&gt; Int

maxsize :: "LimitList":Data-LimitList.html#t:LimitList a -&gt; Int

insert :: a -&gt; "LimitList":Data-LimitList.html#t:LimitList a -&gt; "LimitList":Data-LimitList.html#t:LimitList a

singleton :: a -&gt; "LimitList":Data-LimitList.html#t:LimitList a

remove :: "LimitList":Data-LimitList.html#t:LimitList a -&gt; "LimitList":Data-LimitList.html#t:LimitList a

test :: "LimitList":Data-LimitList.html#t:LimitList Integer

test2 :: "LimitList":Data-LimitList.html#t:LimitList Integer

head :: "LimitList":Data-LimitList.html#t:LimitList a -&gt; Maybe a

tail :: "LimitList":Data-LimitList.html#t:LimitList a -&gt; Maybe ("LimitList":Data-LimitList.html#t:LimitList a)

(&#124;&gt;) :: a -&gt; "LimitList":Data-LimitList.html#t:LimitList a -&gt; "LimitList":Data-LimitList.html#t:LimitList a

catMaybes :: "LimitList":Data-LimitList.html#t:LimitList (Maybe a) -&gt; "LimitList":Data-LimitList.html#t:LimitList a

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
