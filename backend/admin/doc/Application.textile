* "Contents":index.html
* "Index":doc-index.html

 

Safe Haskell

None

Application

Description

This module defines our application's state type and an alias for its handler monad.

h1. Documentation

data ApplicationException

Constructors


|UserErrorE ByteString| |


Instances


|Show "ApplicationException":Application.html#t:ApplicationException| |
|Typeable "ApplicationException":Application.html#t:ApplicationException| |
|Exception "ApplicationException":Application.html#t:ApplicationException| |


data App

Constructors

App

 

Fields

<dl>
<dt>&#95;sess :: Snaplet SessionManager</dt>
<dd> </dd>
<dt>&#95;auth :: Snaplet (AuthManager "App":Application.html#t:App)</dt>
<dd> </dd>
<dt>&#95;sql :: Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig</dt>
<dd> </dd>
</dl>

sql :: Lens' "App":Application.html#t:App (Snaplet "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)

sess :: Lens' "App":Application.html#t:App (Snaplet SessionManager)

auth :: Lens' "App":Application.html#t:App (Snaplet (AuthManager "App":Application.html#t:App))

type AppHandler = Handler "App":Application.html#t:App "App":Application.html#t:App

type Application = "AppHandler":Application.html#t:AppHandler

toAeson :: "InRule":Data-InRules.html#t:InRule -&gt; ByteString

writeAeson :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeError :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeResult :: "ToInRule":Data-InRules.html#t:ToInRule a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeResult' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeMapable :: "Mapable":Model-General.html#t:Mapable a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeMapables :: "Mapable":Model-General.html#t:Mapable a =&gt; [a] -&gt; "Application":Application.html#t:Application ()

getUserId :: "Application":Application.html#t:Application Integer

getOParam :: ByteString -&gt; "Application":Application.html#t:Application ByteString

type SqlMap = HashMap String "SqlValue":Data-SqlTransaction.html#t:SqlValue

getJson :: "Application":Application.html#t:Application "SqlMap":Application.html#t:SqlMap

getJsons :: "Application":Application.html#t:Application ["SqlMap":Application.html#t:SqlMap]

getPagesWithDTDOrdered :: [String] -&gt; "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application (((Integer, Integer), "Constraints":Data-Database.html#t:Constraints), "Orders":Data-Database.html#t:Orders)

getPagesWithDTD :: "DTD":Data-DatabaseTemplate.html#t:DTD -&gt; "Application":Application.html#t:Application ((Integer, Integer), "Constraints":Data-Database.html#t:Constraints)

writeError' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

writeAeson' :: ToJSON a =&gt; a -&gt; "Application":Application.html#t:Application ()

internalError :: String -&gt; "Application":Application.html#t:Application a

runCompose :: (Applicative (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadCatchIO (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "ComposeMonad":Data-ComposeModel.html#t:ComposeMonad a "Connection":Data-SqlTransaction.html#t:Connection a -&gt; m b "App":Application.html#t:App (HashMap String "InRule":Data-InRules.html#t:InRule)

runDb :: (Applicative (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadState "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig), MonadSnaplet m, MonadCatchIO (m b "SqlTransactionConfig":SqlTransactionSnaplet.html#t:SqlTransactionConfig)) =&gt; "SqlTransaction":Data-SqlTransaction.html#t:SqlTransaction "Connection":Data-SqlTransaction.html#t:Connection a -&gt; m b "App":Application.html#t:App a

Produced by "Haddock":http://www.haskell.org/haddock/ version 2.11.0
